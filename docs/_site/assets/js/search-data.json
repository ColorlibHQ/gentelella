{"0": {
    "doc": "API Integration",
    "title": "API Integration Guide",
    "content": "Learn how to integrate Gentelella Admin Template with backend APIs and external services . ",
    "url": "/gentelella/api-integration/#api-integration-guide",
    
    "relUrl": "/api-integration/#api-integration-guide"
  },"1": {
    "doc": "API Integration",
    "title": "Table of contents",
    "content": ". | REST API Integration . | HTTP Client Setup . | Axios Configuration | . | API Service Layer . | Base Service Class | Specific Service Classes | . | . | Real-time Integration . | WebSocket Connection | Real-time Dashboard Updates | . | Data Management . | State Management | Data Caching | . | Authentication Integration . | JWT Token Management | . | Error Handling . | Global Error Handler | . | Performance Optimization . | Request Batching | . | Next Steps | . ",
    "url": "/gentelella/api-integration/#table-of-contents",
    
    "relUrl": "/api-integration/#table-of-contents"
  },"2": {
    "doc": "API Integration",
    "title": "REST API Integration",
    "content": "HTTP Client Setup . Axios Configuration . // src/js/api/http-client.js import axios from 'axios'; class HttpClient { constructor() { this.client = axios.create({ baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8080/api', timeout: 10000, headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' } }); this.setupInterceptors(); } setupInterceptors() { // Request interceptor - add auth token this.client.interceptors.request.use( (config) =&gt; { const token = localStorage.getItem('auth_token'); if (token) { config.headers.Authorization = `Bearer ${token}`; } return config; }, (error) =&gt; Promise.reject(error) ); // Response interceptor - handle errors this.client.interceptors.response.use( (response) =&gt; response.data, (error) =&gt; { if (error.response?.status === 401) { this.handleUnauthorized(); } return Promise.reject(this.formatError(error)); } ); } handleUnauthorized() { localStorage.removeItem('auth_token'); localStorage.removeItem('user_data'); window.location.href = '/login.html'; } formatError(error) { if (error.response) { return { message: error.response.data?.message || 'Server error', status: error.response.status, data: error.response.data }; } else if (error.request) { return { message: 'Network error - please check your connection', status: 0 }; } else { return { message: error.message || 'Unknown error occurred', status: -1 }; } } // HTTP methods get(url, config = {}) { return this.client.get(url, config); } post(url, data = {}, config = {}) { return this.client.post(url, data, config); } put(url, data = {}, config = {}) { return this.client.put(url, data, config); } patch(url, data = {}, config = {}) { return this.client.patch(url, data, config); } delete(url, config = {}) { return this.client.delete(url, config); } // File upload upload(url, file, onProgress = null) { const formData = new FormData(); formData.append('file', file); return this.client.post(url, formData, { headers: { 'Content-Type': 'multipart/form-data' }, onUploadProgress: (progressEvent) =&gt; { if (onProgress) { const progress = Math.round( (progressEvent.loaded * 100) / progressEvent.total ); onProgress(progress); } } }); } } // Create singleton instance export const httpClient = new HttpClient(); . API Service Layer . Base Service Class . // src/js/api/base-service.js import { httpClient } from './http-client.js'; export class BaseService { constructor(endpoint) { this.endpoint = endpoint; this.http = httpClient; } async getAll(params = {}) { try { const response = await this.http.get(this.endpoint, { params }); return { success: true, data: response.data, meta: response.meta }; } catch (error) { return { success: false, error: error.message, details: error }; } } async getById(id) { try { const response = await this.http.get(`${this.endpoint}/${id}`); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message, details: error }; } } async create(data) { try { const response = await this.http.post(this.endpoint, data); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message, details: error }; } } async update(id, data) { try { const response = await this.http.put(`${this.endpoint}/${id}`, data); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message, details: error }; } } async delete(id) { try { await this.http.delete(`${this.endpoint}/${id}`); return { success: true }; } catch (error) { return { success: false, error: error.message, details: error }; } } async search(query, params = {}) { try { const response = await this.http.get(`${this.endpoint}/search`, { params: { q: query, ...params } }); return { success: true, data: response.data, meta: response.meta }; } catch (error) { return { success: false, error: error.message, details: error }; } } } . Specific Service Classes . // src/js/api/user-service.js import { BaseService } from './base-service.js'; class UserService extends BaseService { constructor() { super('/users'); } async authenticate(credentials) { try { const response = await this.http.post('/auth/login', credentials); // Store auth token if (response.token) { localStorage.setItem('auth_token', response.token); localStorage.setItem('user_data', JSON.stringify(response.user)); } return { success: true, data: response }; } catch (error) { return { success: false, error: error.message }; } } async logout() { try { await this.http.post('/auth/logout'); } catch (error) { console.warn('Logout API call failed:', error.message); } finally { localStorage.removeItem('auth_token'); localStorage.removeItem('user_data'); window.location.href = '/login.html'; } } async getCurrentUser() { try { const response = await this.http.get('/auth/me'); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message }; } } async updateProfile(data) { try { const response = await this.http.put('/auth/profile', data); // Update stored user data localStorage.setItem('user_data', JSON.stringify(response.data)); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message }; } } async changePassword(passwordData) { try { const response = await this.http.post('/auth/change-password', passwordData); return { success: true, data: response }; } catch (error) { return { success: false, error: error.message }; } } async uploadAvatar(file, onProgress) { try { const response = await this.http.upload('/auth/avatar', file, onProgress); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message }; } } } export const userService = new UserService(); // src/js/api/dashboard-service.js import { BaseService } from './base-service.js'; class DashboardService extends BaseService { constructor() { super('/dashboard'); } async getStats(dateRange = '30d') { try { const response = await this.http.get('/dashboard/stats', { params: { range: dateRange } }); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message }; } } async getChartData(chartType, params = {}) { try { const response = await this.http.get(`/dashboard/charts/${chartType}`, { params }); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message }; } } async getRecentActivity(limit = 10) { try { const response = await this.http.get('/dashboard/activity', { params: { limit } }); return { success: true, data: response.data }; } catch (error) { return { success: false, error: error.message }; } } } export const dashboardService = new DashboardService(); . ",
    "url": "/gentelella/api-integration/#rest-api-integration",
    
    "relUrl": "/api-integration/#rest-api-integration"
  },"3": {
    "doc": "API Integration",
    "title": "Real-time Integration",
    "content": "WebSocket Connection . // src/js/api/websocket-client.js class WebSocketClient { constructor() { this.ws = null; this.reconnectAttempts = 0; this.maxReconnectAttempts = 5; this.reconnectDelay = 1000; this.listeners = new Map(); this.isConnected = false; } connect() { const wsUrl = import.meta.env.VITE_WS_URL || 'ws://localhost:8080/ws'; const token = localStorage.getItem('auth_token'); this.ws = new WebSocket(`${wsUrl}?token=${token}`); this.ws.onopen = () =&gt; { console.log('WebSocket connected'); this.isConnected = true; this.reconnectAttempts = 0; this.emit('connected'); }; this.ws.onmessage = (event) =&gt; { try { const message = JSON.parse(event.data); this.handleMessage(message); } catch (error) { console.error('Failed to parse WebSocket message:', error); } }; this.ws.onclose = () =&gt; { console.log('WebSocket disconnected'); this.isConnected = false; this.emit('disconnected'); this.reconnect(); }; this.ws.onerror = (error) =&gt; { console.error('WebSocket error:', error); this.emit('error', error); }; } reconnect() { if (this.reconnectAttempts &gt;= this.maxReconnectAttempts) { console.error('Max reconnection attempts reached'); return; } this.reconnectAttempts++; const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1); console.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts})`); setTimeout(() =&gt; { this.connect(); }, delay); } handleMessage(message) { const { type, data } = message; this.emit(type, data); } send(type, data = {}) { if (!this.isConnected) { console.warn('WebSocket not connected'); return false; } const message = JSON.stringify({ type, data }); this.ws.send(message); return true; } on(event, callback) { if (!this.listeners.has(event)) { this.listeners.set(event, []); } this.listeners.get(event).push(callback); } off(event, callback) { if (!this.listeners.has(event)) return; const callbacks = this.listeners.get(event); const index = callbacks.indexOf(callback); if (index &gt; -1) { callbacks.splice(index, 1); } } emit(event, data) { if (!this.listeners.has(event)) return; this.listeners.get(event).forEach(callback =&gt; { try { callback(data); } catch (error) { console.error(`Error in WebSocket event handler for ${event}:`, error); } }); } disconnect() { if (this.ws) { this.ws.close(); this.ws = null; } this.isConnected = false; } } // Create singleton instance export const wsClient = new WebSocketClient(); // Auto-connect if user is authenticated if (localStorage.getItem('auth_token')) { wsClient.connect(); } . Real-time Dashboard Updates . // src/js/dashboard/real-time-dashboard.js import { wsClient } from '../api/websocket-client.js'; import { dashboardService } from '../api/dashboard-service.js'; class RealTimeDashboard { constructor() { this.charts = new Map(); this.stats = new Map(); this.init(); } init() { this.setupWebSocketListeners(); this.loadInitialData(); } setupWebSocketListeners() { // Listen for real-time stats updates wsClient.on('stats.update', (data) =&gt; { this.updateStats(data); }); // Listen for new chart data wsClient.on('chart.data', (data) =&gt; { this.updateChart(data.chartId, data.data); }); // Listen for new notifications wsClient.on('notification', (data) =&gt; { this.showNotification(data); }); // Listen for user activity wsClient.on('user.activity', (data) =&gt; { this.updateActivityFeed(data); }); } async loadInitialData() { try { // Load dashboard stats const statsResult = await dashboardService.getStats(); if (statsResult.success) { this.renderStats(statsResult.data); } // Load chart data const chartTypes = ['sales', 'users', 'revenue']; for (const chartType of chartTypes) { const chartResult = await dashboardService.getChartData(chartType); if (chartResult.success) { this.renderChart(chartType, chartResult.data); } } // Load recent activity const activityResult = await dashboardService.getRecentActivity(); if (activityResult.success) { this.renderActivity(activityResult.data); } } catch (error) { console.error('Failed to load dashboard data:', error); } } updateStats(data) { Object.entries(data).forEach(([key, value]) =&gt; { const element = document.querySelector(`[data-stat=\"${key}\"]`); if (element) { // Animate value change this.animateValue(element, value); } }); } animateValue(element, newValue) { const currentValue = parseFloat(element.textContent.replace(/[^0-9.-]/g, '')) || 0; const difference = newValue - currentValue; const steps = 30; const stepValue = difference / steps; let current = currentValue; const timer = setInterval(() =&gt; { current += stepValue; element.textContent = this.formatValue(current, element.dataset.format); if (--steps &lt;= 0) { clearInterval(timer); element.textContent = this.formatValue(newValue, element.dataset.format); } }, 16); } formatValue(value, format) { switch (format) { case 'currency': return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value); case 'percentage': return `${value.toFixed(1)}%`; case 'number': return new Intl.NumberFormat('en-US').format(Math.round(value)); default: return value.toString(); } } updateChart(chartId, newData) { const chart = this.charts.get(chartId); if (!chart) return; // Update chart data chart.data = newData; chart.update('active'); } showNotification(data) { // Use notification plugin or create custom notification if (window.GentelellaPlugins &amp;&amp; window.GentelellaPlugins.getPlugin('notifications')) { const notifications = window.GentelellaPlugins.getPlugin('notifications'); notifications.show(data.message, data.type); } } updateActivityFeed(activity) { const feedContainer = document.querySelector('#activity-feed'); if (!feedContainer) return; const activityItem = document.createElement('div'); activityItem.className = 'activity-item'; activityItem.innerHTML = ` &lt;div class=\"activity-icon\"&gt; &lt;i class=\"fa fa-${activity.icon}\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"activity-content\"&gt; &lt;div class=\"activity-text\"&gt;${activity.message}&lt;/div&gt; &lt;div class=\"activity-time\"&gt;${this.formatTime(activity.timestamp)}&lt;/div&gt; &lt;/div&gt; `; // Add to top of feed feedContainer.insertBefore(activityItem, feedContainer.firstChild); // Remove oldest items if feed is too long const items = feedContainer.querySelectorAll('.activity-item'); if (items.length &gt; 10) { for (let i = 10; i &lt; items.length; i++) { items[i].remove(); } } } formatTime(timestamp) { const date = new Date(timestamp); const now = new Date(); const diff = now - date; if (diff &lt; 60000) return 'Just now'; if (diff &lt; 3600000) return `${Math.floor(diff / 60000)}m ago`; if (diff &lt; 86400000) return `${Math.floor(diff / 3600000)}h ago`; return date.toLocaleDateString(); } } // Initialize real-time dashboard new RealTimeDashboard(); . ",
    "url": "/gentelella/api-integration/#real-time-integration",
    
    "relUrl": "/api-integration/#real-time-integration"
  },"4": {
    "doc": "API Integration",
    "title": "Data Management",
    "content": "State Management . // src/js/store/app-store.js class AppStore { constructor() { this.state = { user: null, theme: 'light', sidebarCollapsed: false, notifications: [], loading: false, error: null }; this.listeners = new Map(); this.loadFromStorage(); } // Get current state getState() { return { ...this.state }; } // Update state setState(updates) { const prevState = { ...this.state }; this.state = { ...this.state, ...updates }; // Notify listeners this.notifyListeners(prevState, this.state); // Persist certain state to localStorage this.saveToStorage(); } // Subscribe to state changes subscribe(listener) { const id = Date.now() + Math.random(); this.listeners.set(id, listener); // Return unsubscribe function return () =&gt; { this.listeners.delete(id); }; } notifyListeners(prevState, newState) { this.listeners.forEach(listener =&gt; { try { listener(newState, prevState); } catch (error) { console.error('Error in state listener:', error); } }); } loadFromStorage() { try { const userData = localStorage.getItem('user_data'); if (userData) { this.state.user = JSON.parse(userData); } const theme = localStorage.getItem('theme'); if (theme) { this.state.theme = theme; } const sidebarCollapsed = localStorage.getItem('sidebar-collapsed'); if (sidebarCollapsed) { this.state.sidebarCollapsed = sidebarCollapsed === 'true'; } } catch (error) { console.error('Failed to load state from storage:', error); } } saveToStorage() { try { if (this.state.user) { localStorage.setItem('user_data', JSON.stringify(this.state.user)); } localStorage.setItem('theme', this.state.theme); localStorage.setItem('sidebar-collapsed', this.state.sidebarCollapsed.toString()); } catch (error) { console.error('Failed to save state to storage:', error); } } // Action methods setUser(user) { this.setState({ user }); } clearUser() { this.setState({ user: null }); localStorage.removeItem('user_data'); localStorage.removeItem('auth_token'); } setTheme(theme) { this.setState({ theme }); document.documentElement.setAttribute('data-theme', theme); } toggleSidebar() { this.setState({ sidebarCollapsed: !this.state.sidebarCollapsed }); } addNotification(notification) { const notifications = [...this.state.notifications, { id: Date.now(), timestamp: new Date(), ...notification }]; this.setState({ notifications }); } removeNotification(id) { const notifications = this.state.notifications.filter(n =&gt; n.id !== id); this.setState({ notifications }); } setLoading(loading) { this.setState({ loading }); } setError(error) { this.setState({ error }); } clearError() { this.setState({ error: null }); } } // Create singleton instance export const appStore = new AppStore(); // Helper hook for components export function useStore(selector) { const state = appStore.getState(); return selector ? selector(state) : state; } . Data Caching . // src/js/cache/data-cache.js class DataCache { constructor() { this.cache = new Map(); this.expiry = new Map(); this.defaultTTL = 5 * 60 * 1000; // 5 minutes } set(key, data, ttl = this.defaultTTL) { this.cache.set(key, data); this.expiry.set(key, Date.now() + ttl); } get(key) { if (!this.cache.has(key)) { return null; } const expiryTime = this.expiry.get(key); if (Date.now() &gt; expiryTime) { this.delete(key); return null; } return this.cache.get(key); } has(key) { return this.get(key) !== null; } delete(key) { this.cache.delete(key); this.expiry.delete(key); } clear() { this.cache.clear(); this.expiry.clear(); } cleanup() { const now = Date.now(); for (const [key, expiryTime] of this.expiry.entries()) { if (now &gt; expiryTime) { this.delete(key); } } } size() { return this.cache.size; } } // Create singleton instance export const dataCache = new DataCache(); // Auto cleanup every 5 minutes setInterval(() =&gt; { dataCache.cleanup(); }, 5 * 60 * 1000); . ",
    "url": "/gentelella/api-integration/#data-management",
    
    "relUrl": "/api-integration/#data-management"
  },"5": {
    "doc": "API Integration",
    "title": "Authentication Integration",
    "content": "JWT Token Management . // src/js/auth/auth-manager.js class AuthManager { constructor() { this.token = localStorage.getItem('auth_token'); this.refreshTimer = null; this.init(); } init() { if (this.token) { this.scheduleTokenRefresh(); } } async login(credentials) { try { const response = await userService.authenticate(credentials); if (response.success) { this.token = response.data.token; this.scheduleTokenRefresh(); // Update app state appStore.setUser(response.data.user); return response; } return response; } catch (error) { return { success: false, error: error.message }; } } logout() { this.clearTokenRefresh(); this.token = null; // Clear app state appStore.clearUser(); // Call logout service userService.logout(); } isAuthenticated() { return !!this.token &amp;&amp; !this.isTokenExpired(); } isTokenExpired() { if (!this.token) return true; try { const payload = JSON.parse(atob(this.token.split('.')[1])); return payload.exp * 1000 &lt; Date.now(); } catch (error) { return true; } } async refreshToken() { try { const response = await httpClient.post('/auth/refresh'); if (response.token) { this.token = response.token; localStorage.setItem('auth_token', this.token); this.scheduleTokenRefresh(); return true; } return false; } catch (error) { console.error('Token refresh failed:', error); this.logout(); return false; } } scheduleTokenRefresh() { this.clearTokenRefresh(); if (!this.token) return; try { const payload = JSON.parse(atob(this.token.split('.')[1])); const expiryTime = payload.exp * 1000; const refreshTime = expiryTime - (5 * 60 * 1000); // 5 minutes before expiry const timeUntilRefresh = refreshTime - Date.now(); if (timeUntilRefresh &gt; 0) { this.refreshTimer = setTimeout(() =&gt; { this.refreshToken(); }, timeUntilRefresh); } else { // Token expired or will expire soon this.refreshToken(); } } catch (error) { console.error('Failed to schedule token refresh:', error); } } clearTokenRefresh() { if (this.refreshTimer) { clearTimeout(this.refreshTimer); this.refreshTimer = null; } } getToken() { return this.token; } getUser() { const userData = localStorage.getItem('user_data'); return userData ? JSON.parse(userData) : null; } } // Create singleton instance export const authManager = new AuthManager(); // Route protection export function requireAuth() { if (!authManager.isAuthenticated()) { window.location.href = '/login.html'; return false; } return true; } // Auto-redirect if not authenticated (for protected pages) if (document.querySelector('[data-require-auth]')) { requireAuth(); } . ",
    "url": "/gentelella/api-integration/#authentication-integration",
    
    "relUrl": "/api-integration/#authentication-integration"
  },"6": {
    "doc": "API Integration",
    "title": "Error Handling",
    "content": "Global Error Handler . // src/js/error/error-handler.js class ErrorHandler { constructor() { this.setupGlobalHandlers(); } setupGlobalHandlers() { // Handle unhandled promise rejections window.addEventListener('unhandledrejection', (event) =&gt; { console.error('Unhandled promise rejection:', event.reason); this.handleError(event.reason, 'Promise Rejection'); event.preventDefault(); }); // Handle JavaScript errors window.addEventListener('error', (event) =&gt; { console.error('JavaScript error:', event.error); this.handleError(event.error, 'JavaScript Error'); }); // Handle API errors document.addEventListener('api-error', (event) =&gt; { this.handleApiError(event.detail); }); } handleError(error, context = 'Unknown') { const errorInfo = { message: error.message || 'Unknown error', stack: error.stack, context, timestamp: new Date(), userAgent: navigator.userAgent, url: window.location.href, user: authManager.getUser()?.id }; // Log to console console.error('Error handled:', errorInfo); // Send to error tracking service this.reportError(errorInfo); // Show user-friendly notification this.showErrorNotification(error); } handleApiError(error) { if (error.status === 401) { this.handleUnauthorized(); } else if (error.status &gt;= 500) { this.showErrorNotification({ message: 'Server error occurred. Please try again later.' }); } else { this.showErrorNotification(error); } } handleUnauthorized() { // Clear auth data and redirect to login authManager.logout(); } showErrorNotification(error) { // Use notification plugin if available if (window.GentelellaPlugins &amp;&amp; window.GentelellaPlugins.getPlugin('notifications')) { const notifications = window.GentelellaPlugins.getPlugin('notifications'); notifications.show(error.message || 'An error occurred', 'error'); } else { // Fallback to alert alert(error.message || 'An error occurred'); } } async reportError(errorInfo) { try { // Send error to monitoring service await httpClient.post('/errors/report', errorInfo); } catch (reportingError) { console.error('Failed to report error:', reportingError); } } } // Initialize global error handler new ErrorHandler(); . ",
    "url": "/gentelella/api-integration/#error-handling",
    
    "relUrl": "/api-integration/#error-handling"
  },"7": {
    "doc": "API Integration",
    "title": "Performance Optimization",
    "content": "Request Batching . // src/js/api/request-batcher.js class RequestBatcher { constructor() { this.batches = new Map(); this.batchDelay = 100; // ms } batch(endpoint, id, params = {}) { return new Promise((resolve, reject) =&gt; { if (!this.batches.has(endpoint)) { this.batches.set(endpoint, { requests: [], timer: null }); } const batch = this.batches.get(endpoint); batch.requests.push({ id, params, resolve, reject }); // Clear existing timer and set new one if (batch.timer) { clearTimeout(batch.timer); } batch.timer = setTimeout(() =&gt; { this.executeBatch(endpoint); }, this.batchDelay); }); } async executeBatch(endpoint) { const batch = this.batches.get(endpoint); if (!batch || batch.requests.length === 0) return; const requests = batch.requests.slice(); batch.requests = []; batch.timer = null; try { const ids = requests.map(req =&gt; req.id); const response = await httpClient.post(`${endpoint}/batch`, { ids }); // Resolve individual requests requests.forEach(request =&gt; { const result = response.data.find(item =&gt; item.id === request.id); if (result) { request.resolve(result); } else { request.reject(new Error('Item not found in batch response')); } }); } catch (error) { // Reject all requests requests.forEach(request =&gt; { request.reject(error); }); } } } export const requestBatcher = new RequestBatcher(); . ",
    "url": "/gentelella/api-integration/#performance-optimization",
    
    "relUrl": "/api-integration/#performance-optimization"
  },"8": {
    "doc": "API Integration",
    "title": "Next Steps",
    "content": ". | Security Guide - Implement security best practices | Testing Guide - Test your API integrations | Monitoring Guide - Monitor API performance | . 💡 Pro Tip: Always implement proper error handling and retry logic for API calls. Use caching strategically to reduce API load and improve user experience. ",
    "url": "/gentelella/api-integration/#next-steps",
    
    "relUrl": "/api-integration/#next-steps"
  },"9": {
    "doc": "API Integration",
    "title": "API Integration",
    "content": " ",
    "url": "/gentelella/api-integration/",
    
    "relUrl": "/api-integration/"
  },"10": {
    "doc": "Components Guide",
    "title": "Components Guide",
    "content": "Complete reference for all components available in Gentelella Admin Template . ",
    "url": "/gentelella/components/",
    
    "relUrl": "/components/"
  },"11": {
    "doc": "Components Guide",
    "title": "Table of contents",
    "content": ". | Dashboard Components . | Dashboard Layouts . | Main Dashboard (index.html) | Dashboard 2 (index2.html) | Dashboard 3 (index3.html) | . | Widget Cards . | Tile Widgets | Info Box Widgets | . | . | Chart Components . | Chart.js Integration . | Line Charts | Bar Charts | Pie Charts | . | Morris.js Charts . | Line Charts | Area Charts | . | Sparkline Charts | Gauge Charts | . | Form Components . | Basic Form Elements . | Input Fields | Select Dropdowns | . | Advanced Form Components . | Select2 Enhanced Dropdowns | Date/Time Pickers | Range Sliders | File Upload with Dropzone | Rich Text Editor | . | Form Validation . | Bootstrap Validation | Parsley.js Validation | . | . | Table Components . | Basic Tables . | Responsive Table | . | DataTables Integration . | Basic DataTable | Advanced DataTable Features | . | . | UI Elements . | Navigation Components . | Sidebar Navigation | Breadcrumbs | . | Modal Components . | Basic Modal | Large Modal with Form | . | Alert Components . | Bootstrap Alerts | PNotify Notifications | . | Progress Components . | Progress Bars | Animated Progress with JavaScript | . | . | Map Components . | jVectorMap Integration . | World Map | Regional Map | . | . | Calendar Components . | FullCalendar Integration | . | Media Components . | Image Gallery | . | Next Steps | . ",
    "url": "/gentelella/components/#table-of-contents",
    
    "relUrl": "/components/#table-of-contents"
  },"12": {
    "doc": "Components Guide",
    "title": "Dashboard Components",
    "content": "Dashboard Layouts . Gentelella includes three pre-designed dashboard layouts: . Main Dashboard (index.html) . | Revenue widgets with animated counters | Real-time charts showing trends and analytics | Activity timeline with user interactions | Quick stats cards with icons | To-do lists with progress tracking | . &lt;!-- Revenue Widget Example --&gt; &lt;div class=\"col-md-3 col-sm-6\"&gt; &lt;div class=\"x_panel tile fixed_height_320\"&gt; &lt;div class=\"x_title\"&gt; &lt;h2&gt;Total Revenue&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"x_content\"&gt; &lt;span class=\"chart\" data-percent=\"73\"&gt; &lt;span class=\"percent\"&gt;73&lt;/span&gt; &lt;/span&gt; &lt;h3&gt;$52,147&lt;/h3&gt; &lt;div class=\"sidebar-widget\"&gt; &lt;h4&gt;Revenue breakdown&lt;/h4&gt; &lt;canvas id=\"revenue-chart\"&gt;&lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . Dashboard 2 (index2.html) . | Full-width charts for detailed analytics | Map integration with geographical data | Compact widgets for KPIs | News feed with updates | . Dashboard 3 (index3.html) . | Calendar integration with events | Weather widget with forecasts | Social media stats counters | Project timeline view | . Widget Cards . Tile Widgets . &lt;div class=\"tile_count\"&gt; &lt;div class=\"col-md-2 col-sm-4 tile_stats_count\"&gt; &lt;span class=\"count_top\"&gt;&lt;i class=\"fa fa-user\"&gt;&lt;/i&gt; Total Users&lt;/span&gt; &lt;div class=\"count\"&gt;2500&lt;/div&gt; &lt;span class=\"count_bottom\"&gt;&lt;i class=\"green\"&gt;4% &lt;/i&gt; From last Week&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; . Info Box Widgets . &lt;div class=\"col-md-4 col-sm-4\"&gt; &lt;div class=\"x_panel tile fixed_height_320 overflow_hidden\"&gt; &lt;div class=\"x_title\"&gt; &lt;h2&gt;Network Activities&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"x_content\"&gt; &lt;table class=\"countries_list\"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;United States&lt;/td&gt; &lt;td class=\"fs-15 fw-700 text-right\"&gt;2,371&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . ",
    "url": "/gentelella/components/#dashboard-components",
    
    "relUrl": "/components/#dashboard-components"
  },"13": {
    "doc": "Components Guide",
    "title": "Chart Components",
    "content": "Chart.js Integration . Line Charts . // Initialize line chart import Chart from 'chart.js/auto'; const ctx = document.getElementById('lineChart').getContext('2d'); const lineChart = new Chart(ctx, { type: 'line', data: { labels: ['January', 'February', 'March', 'April', 'May', 'June'], datasets: [{ label: 'Sales', data: [12, 19, 3, 5, 2, 3], borderColor: '#73879C', backgroundColor: 'rgba(115, 135, 156, 0.1)', tension: 0.4 }] }, options: { responsive: true, plugins: { legend: { position: 'bottom' } } } }); . Bar Charts . &lt;div class=\"x_panel\"&gt; &lt;div class=\"x_title\"&gt; &lt;h2&gt;Monthly Sales&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"x_content\"&gt; &lt;canvas id=\"barChart\" width=\"400\" height=\"200\"&gt;&lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt; . Pie Charts . const pieChart = new Chart(ctx, { type: 'pie', data: { labels: ['Desktop', 'Mobile', 'Tablet'], datasets: [{ data: [300, 50, 100], backgroundColor: ['#73879C', '#26B99A', '#3498DB'] }] } }); . Morris.js Charts . Line Charts . Morris.Line({ element: 'line-chart', data: [ { y: '2023-01', a: 100, b: 90 }, { y: '2023-02', a: 75, b: 65 }, { y: '2023-03', a: 50, b: 40 } ], xkey: 'y', ykeys: ['a', 'b'], labels: ['Series A', 'Series B'] }); . Area Charts . Morris.Area({ element: 'area-chart', data: [ { period: '2023-01', sales: 2666, downloads: 2647 }, { period: '2023-02', sales: 2778, downloads: 2294 } ], xkey: 'period', ykeys: ['sales', 'downloads'], labels: ['Sales', 'Downloads'] }); . Sparkline Charts . $('.sparkline').sparkline([5,6,7,2,0,-4,-2,4], { type: 'line', width: '100%', height: '30', lineColor: '#26B99A', fillColor: 'rgba(38, 185, 154, 0.3)' }); . Gauge Charts . import Gauge from 'gauge.js'; const gauge = new Gauge(document.getElementById('gauge')).setOptions({ angle: 0.15, lineWidth: 0.2, radiusScale: 1, pointer: { length: 0.6, strokeWidth: 0.035, color: '#000000' }, limitMax: false, limitMin: false, colorStart: '#6FADCF', colorStop: '#8FC0DA', strokeColor: '#E0E0E0', generateGradient: true, highDpiSupport: true }); gauge.maxValue = 100; gauge.setMinValue(0); gauge.animationSpeed = 32; gauge.set(67); . ",
    "url": "/gentelella/components/#chart-components",
    
    "relUrl": "/components/#chart-components"
  },"14": {
    "doc": "Components Guide",
    "title": "Form Components",
    "content": "Basic Form Elements . Input Fields . &lt;div class=\"form-group row\"&gt; &lt;label class=\"col-form-label col-md-3 col-sm-3\"&gt;Email&lt;/label&gt; &lt;div class=\"col-md-6 col-sm-6\"&gt; &lt;input type=\"email\" class=\"form-control\" placeholder=\"Enter email\"&gt; &lt;/div&gt; &lt;/div&gt; . Select Dropdowns . &lt;div class=\"form-group row\"&gt; &lt;label class=\"col-form-label col-md-3 col-sm-3\"&gt;Country&lt;/label&gt; &lt;div class=\"col-md-6 col-sm-6\"&gt; &lt;select class=\"form-control\"&gt; &lt;option&gt;Choose option&lt;/option&gt; &lt;option&gt;United States&lt;/option&gt; &lt;option&gt;United Kingdom&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; . Advanced Form Components . Select2 Enhanced Dropdowns . &lt;select class=\"form-control select2\" multiple=\"multiple\"&gt; &lt;option value=\"AK\"&gt;Alaska&lt;/option&gt; &lt;option value=\"HI\"&gt;Hawaii&lt;/option&gt; &lt;option value=\"CA\"&gt;California&lt;/option&gt; &lt;/select&gt; . // Initialize Select2 $('.select2').select2({ theme: 'bootstrap-5', width: '100%', placeholder: 'Select options...' }); . Date/Time Pickers . &lt;div class=\"form-group\"&gt; &lt;label&gt;Date Range:&lt;/label&gt; &lt;div&gt; &lt;input type=\"text\" class=\"form-control\" id=\"reservation\" placeholder=\"Select date range\"&gt; &lt;/div&gt; &lt;/div&gt; . import { DateTime } from 'tempus-dominus'; new DateTime(document.getElementById('reservation'), { display: { components: { calendar: true, date: true, month: true, year: true, decades: true, clock: false } } }); . Range Sliders . &lt;div class=\"form-group\"&gt; &lt;label&gt;Price Range:&lt;/label&gt; &lt;input type=\"text\" id=\"range-slider\" value=\"\" name=\"range\"&gt; &lt;/div&gt; . $(\"#range-slider\").ionRangeSlider({ type: \"double\", min: 0, max: 1000, from: 200, to: 500, prefix: \"$\" }); . File Upload with Dropzone . &lt;div class=\"dropzone\" id=\"file-dropzone\"&gt; &lt;div class=\"dz-message\"&gt; &lt;h3&gt;Drop files here or click to upload&lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; . import Dropzone from 'dropzone'; new Dropzone(\"#file-dropzone\", { url: \"/upload\", maxFilesize: 10, acceptedFiles: \".jpeg,.jpg,.png,.gif\" }); . Rich Text Editor . &lt;div class=\"form-group\"&gt; &lt;label&gt;Content:&lt;/label&gt; &lt;div id=\"editor\" class=\"form-control\" style=\"height: 300px;\"&gt; &lt;p&gt;Initial content...&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; . Form Validation . Bootstrap Validation . &lt;form class=\"needs-validation\" novalidate&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"validationCustom01\"&gt;First name&lt;/label&gt; &lt;input type=\"text\" class=\"form-control\" id=\"validationCustom01\" placeholder=\"First name\" required&gt; &lt;div class=\"invalid-feedback\"&gt; Please provide a valid first name. &lt;/div&gt; &lt;/div&gt; &lt;button class=\"btn btn-primary\" type=\"submit\"&gt;Submit&lt;/button&gt; &lt;/form&gt; . Parsley.js Validation . &lt;form data-parsley-validate&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Email *&lt;/label&gt; &lt;input type=\"email\" class=\"form-control\" data-parsley-type=\"email\" required&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label&gt;Password *&lt;/label&gt; &lt;input type=\"password\" class=\"form-control\" data-parsley-minlength=\"6\" required&gt; &lt;/div&gt; &lt;/form&gt; . ",
    "url": "/gentelella/components/#form-components",
    
    "relUrl": "/components/#form-components"
  },"15": {
    "doc": "Components Guide",
    "title": "Table Components",
    "content": "Basic Tables . Responsive Table . &lt;div class=\"table-responsive\"&gt; &lt;table class=\"table table-striped table-bordered\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Position&lt;/th&gt; &lt;th&gt;Office&lt;/th&gt; &lt;th&gt;Salary&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Tiger Nixon&lt;/td&gt; &lt;td&gt;System Architect&lt;/td&gt; &lt;td&gt;Edinburgh&lt;/td&gt; &lt;td&gt;$320,800&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; . DataTables Integration . Basic DataTable . &lt;table id=\"datatable\" class=\"table table-striped table-bordered\" style=\"width:100%\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Position&lt;/th&gt; &lt;th&gt;Office&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;th&gt;Start date&lt;/th&gt; &lt;th&gt;Salary&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;/table&gt; . $('#datatable').DataTable({ ajax: '/api/employees', columns: [ { data: 'name' }, { data: 'position' }, { data: 'office' }, { data: 'age' }, { data: 'start_date' }, { data: 'salary' } ], responsive: true, pageLength: 25, dom: 'Bfrtip', buttons: ['copy', 'csv', 'excel', 'pdf', 'print'] }); . Advanced DataTable Features . $('#advanced-datatable').DataTable({ processing: true, serverSide: true, ajax: { url: '/api/data', type: 'POST' }, columns: [ { data: 'id', searchable: false }, { data: 'name' }, { data: 'email' }, { data: 'actions', orderable: false, searchable: false, render: function(data, type, row) { return ` &lt;button class=\"btn btn-sm btn-primary edit-btn\" data-id=\"${row.id}\"&gt;Edit&lt;/button&gt; &lt;button class=\"btn btn-sm btn-danger delete-btn\" data-id=\"${row.id}\"&gt;Delete&lt;/button&gt; `; } } ], order: [[0, 'desc']], pageLength: 50, lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, \"All\"]] }); . ",
    "url": "/gentelella/components/#table-components",
    
    "relUrl": "/components/#table-components"
  },"16": {
    "doc": "Components Guide",
    "title": "UI Elements",
    "content": "Navigation Components . Sidebar Navigation . &lt;div class=\"col-md-3 left_col\"&gt; &lt;div class=\"left_col scroll-view\"&gt; &lt;div class=\"navbar nav_title\" style=\"border: 0;\"&gt; &lt;a href=\"index.html\" class=\"site_title\"&gt; &lt;i class=\"fa fa-paw\"&gt;&lt;/i&gt; &lt;span&gt;Gentelella!&lt;/span&gt; &lt;/a&gt; &lt;/div&gt; &lt;div id=\"sidebar-menu\" class=\"main_menu_side hidden-print main_menu\"&gt; &lt;div class=\"menu_section\"&gt; &lt;h3&gt;General&lt;/h3&gt; &lt;ul class=\"nav side-menu\"&gt; &lt;li&gt;&lt;a&gt;&lt;i class=\"fa fa-home\"&gt;&lt;/i&gt; Home &lt;span class=\"fa fa-chevron-down\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class=\"nav child_menu\"&gt; &lt;li&gt;&lt;a href=\"index.html\"&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"index2.html\"&gt;Dashboard2&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . Breadcrumbs . &lt;div class=\"page-title\"&gt; &lt;div class=\"title_left\"&gt; &lt;h3&gt;Form Elements&lt;/h3&gt; &lt;/div&gt; &lt;div class=\"title_right\"&gt; &lt;div class=\"col-md-5 col-sm-5 form-group pull-right top_search\"&gt; &lt;div class=\"input-group\"&gt; &lt;input type=\"text\" class=\"form-control\" placeholder=\"Search for...\"&gt; &lt;span class=\"input-group-btn\"&gt; &lt;button class=\"btn btn-default\" type=\"button\"&gt;Go!&lt;/button&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . Modal Components . Basic Modal . &lt;div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\"&gt; &lt;div class=\"modal-dialog\" role=\"document\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"modal\"&gt; &lt;span aria-hidden=\"true\"&gt;&amp;times;&lt;/span&gt; &lt;/button&gt; &lt;h4 class=\"modal-title\"&gt;Modal title&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; &lt;p&gt;Modal body content...&lt;/p&gt; &lt;/div&gt; &lt;div class=\"modal-footer\"&gt; &lt;button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\"&gt;Close&lt;/button&gt; &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Save changes&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . Large Modal with Form . &lt;div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\"&gt; &lt;div class=\"modal-dialog modal-lg\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h4 class=\"modal-title\"&gt;Large Modal&lt;/h4&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; &lt;form&gt; &lt;!-- Form content --&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . Alert Components . Bootstrap Alerts . &lt;div class=\"alert alert-success alert-dismissible\"&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\"&gt; &lt;span aria-hidden=\"true\"&gt;&amp;times;&lt;/span&gt; &lt;/button&gt; &lt;strong&gt;Success!&lt;/strong&gt; This is a success alert. &lt;/div&gt; &lt;div class=\"alert alert-danger alert-dismissible\"&gt; &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\"&gt; &lt;span aria-hidden=\"true\"&gt;&amp;times;&lt;/span&gt; &lt;/button&gt; &lt;strong&gt;Error!&lt;/strong&gt; Something went wrong. &lt;/div&gt; . PNotify Notifications . import PNotify from 'pnotify'; // Success notification new PNotify({ title: 'Success!', text: 'Your changes have been saved.', type: 'success', styling: 'bootstrap4' }); // Error notification new PNotify({ title: 'Error!', text: 'An error occurred while processing your request.', type: 'error', styling: 'bootstrap4' }); . Progress Components . Progress Bars . &lt;div class=\"progress\"&gt; &lt;div class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"40\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:40%\"&gt; 40% Complete (success) &lt;/div&gt; &lt;/div&gt; &lt;div class=\"progress\"&gt; &lt;div class=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" aria-valuenow=\"75\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:75%\"&gt; 75% &lt;/div&gt; &lt;/div&gt; . Animated Progress with JavaScript . function animateProgress(selector, targetPercentage) { const progressBar = document.querySelector(selector); let currentPercentage = 0; const interval = setInterval(() =&gt; { if (currentPercentage &gt;= targetPercentage) { clearInterval(interval); return; } currentPercentage++; progressBar.style.width = currentPercentage + '%'; progressBar.textContent = currentPercentage + '%'; }, 20); } // Usage animateProgress('.progress-bar', 85); . ",
    "url": "/gentelella/components/#ui-elements",
    
    "relUrl": "/components/#ui-elements"
  },"17": {
    "doc": "Components Guide",
    "title": "Map Components",
    "content": "jVectorMap Integration . World Map . &lt;div id=\"world-map\" style=\"height: 400px;\"&gt;&lt;/div&gt; . $('#world-map').vectorMap({ map: 'world_mill', backgroundColor: 'transparent', regionStyle: { initial: { fill: '#73879C', \"fill-opacity\": 1, stroke: '#fff', \"stroke-width\": 1, \"stroke-opacity\": 1 } }, series: { regions: [{ values: { \"US\": 298, \"SA\": 200, \"AU\": 760, \"IN\": 2000000, \"GB\": 120 }, scale: ['#26B99A', '#E74C3C'], normalizeFunction: 'polynomial' }] } }); . Regional Map . $('#usa-map').vectorMap({ map: 'us_aea', backgroundColor: 'transparent', regionsSelectable: true, series: { regions: [{ values: { \"US-CA\": 200, \"US-TX\": 300, \"US-NY\": 250 }, scale: ['#3498DB', '#E74C3C'] }] } }); . ",
    "url": "/gentelella/components/#map-components",
    
    "relUrl": "/components/#map-components"
  },"18": {
    "doc": "Components Guide",
    "title": "Calendar Components",
    "content": "FullCalendar Integration . &lt;div id=\"calendar\"&gt;&lt;/div&gt; . import { Calendar } from '@fullcalendar/core'; import dayGridPlugin from '@fullcalendar/daygrid'; import timeGridPlugin from '@fullcalendar/timegrid'; import interactionPlugin from '@fullcalendar/interaction'; const calendarEl = document.getElementById('calendar'); const calendar = new Calendar(calendarEl, { plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin], headerToolbar: { left: 'prev,next today', center: 'title', right: 'dayGridMonth,timeGridWeek,timeGridDay' }, initialDate: new Date(), navLinks: true, selectable: true, selectMirror: true, select: function(arg) { const title = prompt('Event Title:'); if (title) { calendar.addEvent({ title: title, start: arg.start, end: arg.end, allDay: arg.allDay }); } calendar.unselect(); }, eventClick: function(arg) { if (confirm('Are you sure you want to delete this event?')) { arg.event.remove(); } }, editable: true, dayMaxEvents: true, events: [ { title: 'All Day Event', start: '2023-01-01' }, { title: 'Long Event', start: '2023-01-07', end: '2023-01-10' } ] }); calendar.render(); . ",
    "url": "/gentelella/components/#calendar-components",
    
    "relUrl": "/components/#calendar-components"
  },"19": {
    "doc": "Components Guide",
    "title": "Media Components",
    "content": "Image Gallery . &lt;div class=\"row\"&gt; &lt;div class=\"col-md-4\"&gt; &lt;a href=\"images/large1.jpg\" class=\"fancybox\" rel=\"gallery1\" title=\"Image 1\"&gt; &lt;img src=\"images/thumb1.jpg\" class=\"img-responsive\" alt=\"\"&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=\"col-md-4\"&gt; &lt;a href=\"images/large2.jpg\" class=\"fancybox\" rel=\"gallery1\" title=\"Image 2\"&gt; &lt;img src=\"images/thumb2.jpg\" class=\"img-responsive\" alt=\"\"&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; . $('.fancybox').fancybox({ openEffect: 'elastic', closeEffect: 'elastic', helpers: { title: { type: 'inside' } } }); . ",
    "url": "/gentelella/components/#media-components",
    
    "relUrl": "/components/#media-components"
  },"20": {
    "doc": "Components Guide",
    "title": "Next Steps",
    "content": ". | Customization Guide - Learn how to customize these components | Performance Guide - Optimize component loading | API Reference - Detailed API documentation | Examples - See components in action | . 💡 Pro Tip: Use the smart loading system to load only the components you need on each page. This significantly improves performance while maintaining functionality. ",
    "url": "/gentelella/components/#next-steps",
    
    "relUrl": "/components/#next-steps"
  },"21": {
    "doc": "Configuration",
    "title": "Configuration Guide",
    "content": "Complete guide to configuring and customizing Gentelella Admin Template . ",
    "url": "/gentelella/configuration/#configuration-guide",
    
    "relUrl": "/configuration/#configuration-guide"
  },"22": {
    "doc": "Configuration",
    "title": "Table of contents",
    "content": ". | Vite Configuration . | Basic Configuration | Advanced Vite Options . | Development Optimizations | Production Optimizations | . | . | SASS Configuration . | Main SASS File | Bootstrap Customization | Custom Component Styles | . | Module Configuration . | Smart Loading System | Chart Module Configuration | Form Module Configuration | . | Environment Variables . | Development Environment | Production Environment | Using Environment Variables | . | Performance Configuration . | Bundle Optimization | Asset Optimization | . | Advanced Configuration . | TypeScript Support | ESLint Configuration | Prettier Configuration | . | Next Steps | . ",
    "url": "/gentelella/configuration/#table-of-contents",
    
    "relUrl": "/configuration/#table-of-contents"
  },"23": {
    "doc": "Configuration",
    "title": "Vite Configuration",
    "content": "Basic Configuration . The vite.config.js file contains optimized settings for both development and production builds: . import { defineConfig } from 'vite'; import { resolve } from 'path'; export default defineConfig({ // Development server configuration server: { port: 3000, host: true, open: true }, // Build configuration build: { outDir: 'dist', assetsDir: 'assets', rollupOptions: { input: { // All 42 HTML files are configured as entry points 'index': 'production/index.html', 'index2': 'production/index2.html', 'index3': 'production/index3.html', 'form': 'production/form.html', 'form_advanced': 'production/form_advanced.html', 'tables': 'production/tables.html', 'charts': 'production/chartjs.html', // ... and 35 more pages }, output: { // Manual chunk splitting for optimal loading manualChunks: { 'vendor-core': ['bootstrap', '@popperjs/core'], 'vendor-charts': ['chart.js', 'morris.js'], 'vendor-forms': ['select2', 'tempus-dominus'], 'vendor-tables': ['datatables.net'], 'vendor-utils': ['dayjs', 'nprogress'] } } }, // Asset optimization assetsInlineLimit: 4096, minify: 'terser', terserOptions: { compress: { drop_console: true, drop_debugger: true } } } }); . Advanced Vite Options . Development Optimizations . export default defineConfig({ server: { // Custom port port: 3001, // Enable HTTPS for local development https: true, // Proxy API requests proxy: { '/api': { target: 'http://localhost:8080', changeOrigin: true, rewrite: (path) =&gt; path.replace(/^\\/api/, '') } } }, // Enable source maps in development css: { devSourcemap: true } }); . Production Optimizations . export default defineConfig({ build: { // Target modern browsers for smaller bundles target: 'es2018', // Enable CSS code splitting cssCodeSplit: true, // Generate source maps for production debugging sourcemap: true, // Optimize chunk size chunkSizeWarningLimit: 1000 } }); . ",
    "url": "/gentelella/configuration/#vite-configuration",
    
    "relUrl": "/configuration/#vite-configuration"
  },"24": {
    "doc": "Configuration",
    "title": "SASS Configuration",
    "content": "Main SASS File . The src/main.scss file is the entry point for all styles: . // Modern @use syntax (recommended) @use \"bootstrap/scss/bootstrap\"; @use \"./scss/custom.scss\"; // Legacy @import syntax (still supported) // @import \"bootstrap/scss/bootstrap\"; // @import \"./scss/custom.scss\"; . Bootstrap Customization . Create src/scss/bootstrap-custom.scss to override Bootstrap variables: . // Override Bootstrap variables BEFORE importing Bootstrap $primary: #73879C; $secondary: #6c757d; $success: #26B99A; $info: #3498DB; $warning: #F39C12; $danger: #E74C3C; // Typography $font-family-base: 'Roboto', 'Helvetica Neue', Arial, sans-serif; $font-size-base: 14px; $line-height-base: 1.5; // Sidebar customization $sidebar-width: 230px; $sidebar-bg: #2A3F54; $sidebar-text-color: #E7E7E7; // Import Bootstrap with your customizations @import \"bootstrap/scss/bootstrap\"; . Custom Component Styles . Create src/scss/components/ directory for modular styles: . // src/scss/components/_dashboard.scss .dashboard-card { border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); transition: transform 0.2s ease-in-out; &amp;:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.15); } .card-header { background: linear-gradient(135deg, $primary, darken($primary, 10%)); color: white; border-radius: 8px 8px 0 0; } } // src/scss/components/_sidebar.scss .sidebar { width: $sidebar-width; background-color: $sidebar-bg; .nav-link { color: $sidebar-text-color; padding: 12px 20px; border-radius: 4px; margin: 2px 10px; transition: all 0.3s ease; &amp;:hover { background-color: rgba(255,255,255,0.1); color: white; } &amp;.active { background-color: $primary; color: white; } } } . ",
    "url": "/gentelella/configuration/#sass-configuration",
    
    "relUrl": "/configuration/#sass-configuration"
  },"25": {
    "doc": "Configuration",
    "title": "Module Configuration",
    "content": "Smart Loading System . Configure which modules load automatically vs. on-demand: . // src/main-core.js - Always loaded essentials import 'bootstrap/dist/js/bootstrap.bundle.min.js'; import './js/custom.min.js'; // Initialize core functionality document.addEventListener('DOMContentLoaded', function() { // Initialize tooltips const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'); const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl =&gt; new bootstrap.Tooltip(tooltipTriggerEl) ); // Initialize popovers const popoverTriggerList = document.querySelectorAll('[data-bs-toggle=\"popover\"]'); const popoverList = [...popoverTriggerList].map(popoverTriggerEl =&gt; new bootstrap.Popover(popoverTriggerEl) ); }); // Dynamic module loading export async function loadModule(moduleName) { try { switch(moduleName) { case 'charts': return await import('./modules/charts.js'); case 'forms': return await import('./modules/forms.js'); case 'tables': return await import('./modules/tables.js'); case 'dashboard': return await import('./modules/dashboard.js'); default: throw new Error(`Unknown module: ${moduleName}`); } } catch (error) { console.error(`Failed to load module ${moduleName}:`, error); return null; } } . Chart Module Configuration . // src/modules/charts.js import Chart from 'chart.js/auto'; export const chartConfig = { // Default Chart.js configuration defaultOptions: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'bottom' } }, scales: { y: { beginAtZero: true } } }, // Chart themes themes: { primary: { backgroundColor: 'rgba(115, 135, 156, 0.1)', borderColor: '#73879C', pointBackgroundColor: '#73879C' }, success: { backgroundColor: 'rgba(38, 185, 154, 0.1)', borderColor: '#26B99A', pointBackgroundColor: '#26B99A' } } }; export function initializeCharts() { // Auto-initialize charts on page load const chartElements = document.querySelectorAll('.chart-container canvas'); chartElements.forEach(canvas =&gt; { const chartType = canvas.dataset.chartType || 'line'; const chartData = JSON.parse(canvas.dataset.chartData || '{}'); new Chart(canvas, { type: chartType, data: chartData, options: chartConfig.defaultOptions }); }); } . Form Module Configuration . // src/modules/forms.js import { DateTime } from 'tempus-dominus'; export const formConfig = { // Select2 configuration select2: { theme: 'bootstrap-5', width: '100%', placeholder: 'Select an option...', allowClear: true }, // Date picker configuration datePicker: { display: { theme: 'light', components: { calendar: true, date: true, month: true, year: true, decades: true, clock: false } }, localization: { format: 'MM/dd/yyyy' } }, // Validation rules validation: { errorClass: 'is-invalid', successClass: 'is-valid', errorElement: 'div', errorPlacement: function(error, element) { error.addClass('invalid-feedback'); element.closest('.form-group').append(error); } } }; export function initializeForms() { // Initialize Select2 $('.select2').select2(formConfig.select2); // Initialize date pickers $('.datepicker').each(function() { new DateTime(this, formConfig.datePicker); }); // Initialize form validation $('form[data-validate]').each(function() { $(this).validate(formConfig.validation); }); } . ",
    "url": "/gentelella/configuration/#module-configuration",
    
    "relUrl": "/configuration/#module-configuration"
  },"26": {
    "doc": "Configuration",
    "title": "Environment Variables",
    "content": "Development Environment . Create .env.development: . # Development settings VITE_API_URL=http://localhost:8080/api VITE_APP_NAME=Gentelella Admin (Dev) VITE_DEBUG_MODE=true VITE_BUNDLE_ANALYZER=false # Feature flags VITE_ENABLE_CHARTS=true VITE_ENABLE_MAPS=true VITE_ENABLE_REAL_TIME=false . Production Environment . Create .env.production: . # Production settings VITE_API_URL=https://api.yoursite.com VITE_APP_NAME=Gentelella Admin VITE_DEBUG_MODE=false VITE_BUNDLE_ANALYZER=false # Performance settings VITE_PRELOAD_MODULES=charts,forms VITE_CDN_URL=https://cdn.yoursite.com . Using Environment Variables . // In your JavaScript files const apiUrl = import.meta.env.VITE_API_URL; const debugMode = import.meta.env.VITE_DEBUG_MODE === 'true'; if (debugMode) { console.log('Debug mode enabled'); } // Conditional module loading if (import.meta.env.VITE_ENABLE_CHARTS === 'true') { const charts = await import('./modules/charts.js'); charts.initializeCharts(); } . ",
    "url": "/gentelella/configuration/#environment-variables",
    
    "relUrl": "/configuration/#environment-variables"
  },"27": {
    "doc": "Configuration",
    "title": "Performance Configuration",
    "content": "Bundle Optimization . // vite.config.js - Production optimizations export default defineConfig({ build: { rollupOptions: { output: { manualChunks: { // Core vendor libraries (loaded on every page) 'vendor-core': [ 'bootstrap', '@popperjs/core', 'jquery' ], // Chart libraries (loaded only on chart pages) 'vendor-charts': [ 'chart.js', 'morris.js', 'gauge.js', 'jquery-sparkline' ], // Form enhancement libraries 'vendor-forms': [ 'select2', 'tempus-dominus', 'ion-rangeslider', 'switchery' ], // Table functionality 'vendor-tables': [ 'datatables.net', 'datatables.net-bs5', 'datatables.net-responsive' ], // Utility libraries 'vendor-utils': [ 'dayjs', 'nprogress', 'autosize' ] } } } } }); . Asset Optimization . // vite.config.js - Asset handling export default defineConfig({ assetsInclude: ['**/*.xlsx', '**/*.pdf'], build: { assetsInlineLimit: 4096, // Inline assets smaller than 4KB rollupOptions: { output: { assetFileNames: (assetInfo) =&gt; { const info = assetInfo.name.split('.'); const extType = info[info.length - 1]; if (/\\.(png|jpe?g|svg|gif|tiff|bmp|ico)$/i.test(assetInfo.name)) { return `images/[name]-[hash][extname]`; } if (/\\.(woff2?|eot|ttf|otf)$/i.test(assetInfo.name)) { return `fonts/[name]-[hash][extname]`; } if (/\\.css$/i.test(assetInfo.name)) { return `css/[name]-[hash][extname]`; } return `assets/[name]-[hash][extname]`; } } } } }); . ",
    "url": "/gentelella/configuration/#performance-configuration",
    
    "relUrl": "/configuration/#performance-configuration"
  },"28": {
    "doc": "Configuration",
    "title": "Advanced Configuration",
    "content": "TypeScript Support . Enable TypeScript by creating tsconfig.json: . { \"compilerOptions\": { \"target\": \"ES2020\", \"useDefineForClassFields\": true, \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"], \"module\": \"ESNext\", \"skipLibCheck\": true, \"moduleResolution\": \"bundler\", \"allowImportingTsExtensions\": true, \"resolveJsonModule\": true, \"isolatedModules\": true, \"noEmit\": true, \"strict\": true, \"noUnusedLocals\": true, \"noUnusedParameters\": true, \"noFallthroughCasesInSwitch\": true, \"paths\": { \"@/*\": [\"./src/*\"], \"@components/*\": [\"./src/components/*\"], \"@modules/*\": [\"./src/modules/*\"] } }, \"include\": [\"src\"] } . ESLint Configuration . Create .eslintrc.js: . module.exports = { env: { browser: true, es2021: true, node: true }, extends: [ 'eslint:recommended', '@typescript-eslint/recommended' ], parser: '@typescript-eslint/parser', parserOptions: { ecmaVersion: 'latest', sourceType: 'module' }, plugins: ['@typescript-eslint'], rules: { 'no-console': 'warn', 'no-debugger': 'error', 'prefer-const': 'error', 'no-var': 'error' }, ignorePatterns: ['dist', 'node_modules', 'vendors'] }; . Prettier Configuration . Create .prettierrc: . { \"semi\": true, \"trailingComma\": \"es5\", \"singleQuote\": true, \"printWidth\": 80, \"tabWidth\": 2, \"useTabs\": false, \"bracketSpacing\": true, \"arrowParens\": \"avoid\", \"endOfLine\": \"lf\" } . ",
    "url": "/gentelella/configuration/#advanced-configuration",
    
    "relUrl": "/configuration/#advanced-configuration"
  },"29": {
    "doc": "Configuration",
    "title": "Next Steps",
    "content": ". | Components Guide - Explore all available components | Customization Guide - Advanced customization techniques | Performance Guide - Optimization strategies | Deployment Guide - Deploy to production | . 💡 Pro Tip: Start with the default configuration and gradually customize based on your project needs. The modular architecture allows you to enable/disable features as required. ",
    "url": "/gentelella/configuration/#next-steps",
    
    "relUrl": "/configuration/#next-steps"
  },"30": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": " ",
    "url": "/gentelella/configuration/",
    
    "relUrl": "/configuration/"
  },"31": {
    "doc": "Customization Guide",
    "title": "Customization Guide",
    "content": "Learn how to customize and extend Gentelella Admin Template to match your brand and requirements . ",
    "url": "/gentelella/customization/",
    
    "relUrl": "/customization/"
  },"32": {
    "doc": "Customization Guide",
    "title": "Table of contents",
    "content": ". | Branding and Theming . | Color Scheme Customization . | Primary Colors | Dark Theme Support | Theme Toggle Implementation | . | Logo and Branding . | Custom Logo Implementation | . | Typography Customization . | Custom Font Integration | . | . | Layout Customization . | Sidebar Modifications . | Collapsible Sidebar | Custom Menu Items | . | Header Customization . | Custom Navigation Bar | Search Functionality | . | . | Component Customization . | Custom Dashboard Widgets . | Widget Factory | Widget Configuration | . | Form Builder . | Dynamic Form Generator | . | . | Advanced Customization . | Plugin System . | Plugin Architecture | Example Plugin | . | . | Next Steps | . ",
    "url": "/gentelella/customization/#table-of-contents",
    
    "relUrl": "/customization/#table-of-contents"
  },"33": {
    "doc": "Customization Guide",
    "title": "Branding and Theming",
    "content": "Color Scheme Customization . Primary Colors . Override Bootstrap variables in src/scss/variables.scss: . // Brand colors $primary: #73879C; // Main brand color $secondary: #6c757d; // Secondary color $success: #26B99A; // Success actions $info: #3498DB; // Information $warning: #F39C12; // Warnings $danger: #E74C3C; // Errors // Sidebar colors $sidebar-bg: #2A3F54; $sidebar-text: #E7E7E7; $sidebar-text-hover: #ffffff; $sidebar-active-bg: $primary; // Dashboard colors $dashboard-bg: #F7F7F7; $card-bg: #ffffff; $card-border: #E6E9ED; // Text colors $text-primary: #73879C; $text-secondary: #ABB1B7; $text-dark: #566573; . Dark Theme Support . Create src/scss/themes/_dark.scss: . // Dark theme variables [data-theme=\"dark\"] { --bs-body-bg: #1a1a1a; --bs-body-color: #ffffff; --bs-card-bg: #2d2d2d; --bs-border-color: #404040; // Sidebar dark theme .left_col { background: #0F1419; .nav-link { color: #CCCCCC; &amp;:hover { color: #ffffff; background: rgba(255, 255, 255, 0.1); } &amp;.active { background: var(--bs-primary); color: #ffffff; } } } // Cards and panels .x_panel { background: var(--bs-card-bg); border: 1px solid var(--bs-border-color); .x_title { border-bottom: 1px solid var(--bs-border-color); h2 { color: var(--bs-body-color); } } } // Tables .table { --bs-table-bg: var(--bs-card-bg); --bs-table-border-color: var(--bs-border-color); color: var(--bs-body-color); } // Forms .form-control { background-color: #3d3d3d; border-color: var(--bs-border-color); color: var(--bs-body-color); &amp;:focus { background-color: #4d4d4d; border-color: var(--bs-primary); } } } . Theme Toggle Implementation . // src/js/theme-toggle.js class ThemeToggle { constructor() { this.theme = localStorage.getItem('theme') || 'light'; this.init(); } init() { // Apply saved theme document.documentElement.setAttribute('data-theme', this.theme); // Create toggle button this.createToggleButton(); // Listen for toggle events document.addEventListener('theme-toggle', this.toggle.bind(this)); } createToggleButton() { const button = document.createElement('button'); button.className = 'btn btn-outline-secondary theme-toggle'; button.innerHTML = this.theme === 'dark' ? '&lt;i class=\"fa fa-sun\"&gt;&lt;/i&gt;' : '&lt;i class=\"fa fa-moon\"&gt;&lt;/i&gt;'; button.addEventListener('click', () =&gt; this.toggle()); // Add to navbar const navbar = document.querySelector('.navbar-nav'); if (navbar) { const li = document.createElement('li'); li.className = 'nav-item'; li.appendChild(button); navbar.appendChild(li); } } toggle() { this.theme = this.theme === 'light' ? 'dark' : 'light'; document.documentElement.setAttribute('data-theme', this.theme); localStorage.setItem('theme', this.theme); // Update button icon const button = document.querySelector('.theme-toggle'); if (button) { button.innerHTML = this.theme === 'dark' ? '&lt;i class=\"fa fa-sun\"&gt;&lt;/i&gt;' : '&lt;i class=\"fa fa-moon\"&gt;&lt;/i&gt;'; } // Trigger custom event document.dispatchEvent(new CustomEvent('theme-changed', { detail: { theme: this.theme } })); } getTheme() { return this.theme; } } // Initialize theme toggle new ThemeToggle(); . Logo and Branding . Custom Logo Implementation . // src/scss/components/_logo.scss .site_title { display: flex; align-items: center; padding: 15px 20px; color: $sidebar-text; text-decoration: none; .logo { width: 32px; height: 32px; margin-right: 10px; img { width: 100%; height: 100%; object-fit: contain; } } .brand-text { font-size: 18px; font-weight: 600; .brand-suffix { font-size: 12px; font-weight: 400; opacity: 0.8; display: block; line-height: 1; } } } // Responsive logo @media (max-width: 768px) { .site_title { .brand-text { display: none; } } } . &lt;!-- Update logo in HTML files --&gt; &lt;a href=\"index.html\" class=\"site_title\"&gt; &lt;div class=\"logo\"&gt; &lt;img src=\"/images/logo.svg\" alt=\"Your Brand\"&gt; &lt;/div&gt; &lt;span class=\"brand-text\"&gt; Your Brand &lt;small class=\"brand-suffix\"&gt;Admin Panel&lt;/small&gt; &lt;/span&gt; &lt;/a&gt; . Typography Customization . Custom Font Integration . // src/scss/base/_typography.scss // Import custom fonts @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&amp;display=swap'); // Typography variables $font-family-base: 'Inter', 'Segoe UI', Roboto, sans-serif; $font-family-heading: 'Inter', 'Segoe UI', Roboto, sans-serif; $font-family-monospace: 'SF Mono', Monaco, 'Cascadia Code', monospace; // Font sizes $font-size-xs: 0.75rem; // 12px $font-size-sm: 0.875rem; // 14px $font-size-base: 1rem; // 16px $font-size-lg: 1.125rem; // 18px $font-size-xl: 1.25rem; // 20px // Font weights $font-weight-light: 300; $font-weight-normal: 400; $font-weight-medium: 500; $font-weight-semibold: 600; $font-weight-bold: 700; // Line heights $line-height-tight: 1.25; $line-height-normal: 1.5; $line-height-relaxed: 1.75; // Apply typography body { font-family: $font-family-base; font-size: $font-size-base; font-weight: $font-weight-normal; line-height: $line-height-normal; } // Headings h1, h2, h3, h4, h5, h6 { font-family: $font-family-heading; font-weight: $font-weight-semibold; line-height: $line-height-tight; margin-bottom: 0.5em; } h1 { font-size: 2.5rem; } h2 { font-size: 2rem; } h3 { font-size: 1.75rem; } h4 { font-size: 1.5rem; } h5 { font-size: 1.25rem; } h6 { font-size: 1rem; } // Code and monospace code, pre { font-family: $font-family-monospace; } . ",
    "url": "/gentelella/customization/#branding-and-theming",
    
    "relUrl": "/customization/#branding-and-theming"
  },"34": {
    "doc": "Customization Guide",
    "title": "Layout Customization",
    "content": "Sidebar Modifications . Collapsible Sidebar . // src/js/sidebar.js class Sidebar { constructor() { this.sidebar = document.querySelector('.left_col'); this.mainContent = document.querySelector('.right_col'); this.toggleBtn = document.querySelector('.sidebar-toggle'); this.isCollapsed = localStorage.getItem('sidebar-collapsed') === 'true'; this.init(); } init() { // Apply saved state if (this.isCollapsed) { this.collapse(); } // Create toggle button if it doesn't exist if (!this.toggleBtn) { this.createToggleButton(); } // Add event listeners this.toggleBtn?.addEventListener('click', () =&gt; this.toggle()); // Handle responsive behavior this.handleResize(); window.addEventListener('resize', () =&gt; this.handleResize()); } createToggleButton() { const button = document.createElement('button'); button.className = 'btn btn-link sidebar-toggle'; button.innerHTML = '&lt;i class=\"fa fa-bars\"&gt;&lt;/i&gt;'; // Add to navbar const navbar = document.querySelector('.navbar'); if (navbar) { navbar.insertBefore(button, navbar.firstChild); } this.toggleBtn = button; } toggle() { if (this.isCollapsed) { this.expand(); } else { this.collapse(); } } collapse() { this.sidebar?.classList.add('collapsed'); this.mainContent?.classList.add('sidebar-collapsed'); this.isCollapsed = true; localStorage.setItem('sidebar-collapsed', 'true'); // Update toggle button icon if (this.toggleBtn) { this.toggleBtn.innerHTML = '&lt;i class=\"fa fa-bars\"&gt;&lt;/i&gt;'; } } expand() { this.sidebar?.classList.remove('collapsed'); this.mainContent?.classList.remove('sidebar-collapsed'); this.isCollapsed = false; localStorage.setItem('sidebar-collapsed', 'false'); // Update toggle button icon if (this.toggleBtn) { this.toggleBtn.innerHTML = '&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;'; } } handleResize() { const width = window.innerWidth; // Auto-collapse on mobile if (width &lt; 768) { this.collapse(); } else if (width &gt; 1200 &amp;&amp; this.isCollapsed) { this.expand(); } } } // Initialize sidebar new Sidebar(); . // src/scss/components/_sidebar.scss .left_col { width: 230px; transition: all 0.3s ease; &amp;.collapsed { width: 70px; .nav_title { .brand-text { display: none; } } .main_menu_side { .nav &gt; li &gt; a { text-align: center; padding: 12px 0; .menu-text { display: none; } .fa { margin-right: 0; } } .child_menu { display: none !important; } } } } .right_col { margin-left: 230px; transition: all 0.3s ease; &amp;.sidebar-collapsed { margin-left: 70px; } } @media (max-width: 768px) { .left_col { transform: translateX(-100%); &amp;.mobile-show { transform: translateX(0); } } .right_col { margin-left: 0; } } . Custom Menu Items . // src/js/menu-builder.js class MenuBuilder { constructor(menuConfig) { this.config = menuConfig; this.menuContainer = document.querySelector('#sidebar-menu'); this.buildMenu(); } buildMenu() { if (!this.menuContainer) return; this.menuContainer.innerHTML = ''; this.config.sections.forEach(section =&gt; { const sectionElement = this.createSection(section); this.menuContainer.appendChild(sectionElement); }); } createSection(section) { const sectionDiv = document.createElement('div'); sectionDiv.className = 'menu_section'; if (section.title) { const title = document.createElement('h3'); title.textContent = section.title; sectionDiv.appendChild(title); } const menuList = document.createElement('ul'); menuList.className = 'nav side-menu'; section.items.forEach(item =&gt; { const menuItem = this.createMenuItem(item); menuList.appendChild(menuItem); }); sectionDiv.appendChild(menuList); return sectionDiv; } createMenuItem(item) { const li = document.createElement('li'); const a = document.createElement('a'); // Set link properties if (item.url) { a.href = item.url; } // Add icon if (item.icon) { const icon = document.createElement('i'); icon.className = `fa fa-${item.icon}`; a.appendChild(icon); } // Add text const textSpan = document.createElement('span'); textSpan.className = 'menu-text'; textSpan.textContent = item.label; a.appendChild(textSpan); // Add submenu indicator if (item.children &amp;&amp; item.children.length &gt; 0) { const chevron = document.createElement('span'); chevron.className = 'fa fa-chevron-down'; a.appendChild(chevron); // Create submenu const submenu = this.createSubmenu(item.children); li.appendChild(submenu); } // Add click handler for submenus a.addEventListener('click', (e) =&gt; { if (item.children &amp;&amp; item.children.length &gt; 0) { e.preventDefault(); this.toggleSubmenu(li); } }); li.appendChild(a); return li; } createSubmenu(items) { const ul = document.createElement('ul'); ul.className = 'nav child_menu'; ul.style.display = 'none'; items.forEach(item =&gt; { const li = document.createElement('li'); const a = document.createElement('a'); a.href = item.url || '#'; a.textContent = item.label; li.appendChild(a); ul.appendChild(li); }); return ul; } toggleSubmenu(parentLi) { const submenu = parentLi.querySelector('.child_menu'); const chevron = parentLi.querySelector('.fa-chevron-down, .fa-chevron-up'); if (submenu.style.display === 'none') { submenu.style.display = 'block'; chevron.className = chevron.className.replace('chevron-down', 'chevron-up'); } else { submenu.style.display = 'none'; chevron.className = chevron.className.replace('chevron-up', 'chevron-down'); } } } // Menu configuration const menuConfig = { sections: [ { title: 'General', items: [ { label: 'Dashboard', icon: 'home', children: [ { label: 'Dashboard 1', url: 'index.html' }, { label: 'Dashboard 2', url: 'index2.html' }, { label: 'Dashboard 3', url: 'index3.html' } ] }, { label: 'Analytics', icon: 'bar-chart-o', url: 'analytics.html' } ] }, { title: 'Forms', items: [ { label: 'Form Elements', icon: 'edit', url: 'form.html' }, { label: 'Form Validation', icon: 'check-square-o', url: 'form_validation.html' } ] } ] }; // Initialize menu new MenuBuilder(menuConfig); . Header Customization . Custom Navigation Bar . // src/scss/components/_navbar.scss .nav_menu { background: #ffffff; border-bottom: 1px solid #E6E9ED; box-shadow: 0 2px 4px rgba(0,0,0,0.1); .navbar-nav { align-items: center; .nav-item { margin: 0 5px; .nav-link { padding: 8px 12px; border-radius: 6px; transition: all 0.2s ease; &amp;:hover { background: rgba(115, 135, 156, 0.1); color: $primary; } } // User dropdown &amp;.dropdown { .dropdown-menu { border: none; box-shadow: 0 8px 24px rgba(0,0,0,0.15); border-radius: 8px; margin-top: 8px; .dropdown-item { padding: 12px 20px; &amp;:hover { background: rgba(115, 135, 156, 0.1); } } } } } } // Breadcrumb .breadcrumb { background: transparent; margin: 0; padding: 0; .breadcrumb-item { color: #566573; &amp;.active { color: $primary; font-weight: 500; } a { color: #566573; text-decoration: none; &amp;:hover { color: $primary; } } } } } . Search Functionality . // src/js/search.js class GlobalSearch { constructor() { this.searchInput = document.getElementById('global-search'); this.searchResults = document.getElementById('search-results'); this.searchData = []; this.init(); } async init() { if (!this.searchInput) return; // Load search data await this.loadSearchData(); // Add event listeners this.searchInput.addEventListener('input', this.debounce(this.handleSearch.bind(this), 300)); this.searchInput.addEventListener('focus', this.showResults.bind(this)); document.addEventListener('click', this.hideResults.bind(this)); } async loadSearchData() { // Load searchable content this.searchData = [ { title: 'Dashboard', url: 'index.html', category: 'Page' }, { title: 'Form Elements', url: 'form.html', category: 'Page' }, { title: 'Tables', url: 'tables.html', category: 'Page' }, { title: 'Charts', url: 'chartjs.html', category: 'Page' }, // Add more searchable items ]; } handleSearch(event) { const query = event.target.value.toLowerCase().trim(); if (query.length &lt; 2) { this.hideResults(); return; } const results = this.searchData.filter(item =&gt; item.title.toLowerCase().includes(query) || item.category.toLowerCase().includes(query) ).slice(0, 10); this.displayResults(results, query); } displayResults(results, query) { if (!this.searchResults) return; this.searchResults.innerHTML = ''; if (results.length === 0) { const noResults = document.createElement('div'); noResults.className = 'search-no-results'; noResults.textContent = 'No results found'; this.searchResults.appendChild(noResults); } else { results.forEach(result =&gt; { const item = this.createResultItem(result, query); this.searchResults.appendChild(item); }); } this.showResults(); } createResultItem(result, query) { const item = document.createElement('a'); item.className = 'search-result-item'; item.href = result.url; const title = document.createElement('div'); title.className = 'search-result-title'; title.innerHTML = this.highlightQuery(result.title, query); const category = document.createElement('div'); category.className = 'search-result-category'; category.textContent = result.category; item.appendChild(title); item.appendChild(category); return item; } highlightQuery(text, query) { const regex = new RegExp(`(${query})`, 'gi'); return text.replace(regex, '&lt;mark&gt;$1&lt;/mark&gt;'); } showResults() { if (this.searchResults) { this.searchResults.style.display = 'block'; } } hideResults(event) { if (event &amp;&amp; this.searchInput.contains(event.target)) return; if (this.searchResults) { this.searchResults.style.display = 'none'; } } debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () =&gt; { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } } // Initialize search new GlobalSearch(); . ",
    "url": "/gentelella/customization/#layout-customization",
    
    "relUrl": "/customization/#layout-customization"
  },"35": {
    "doc": "Customization Guide",
    "title": "Component Customization",
    "content": "Custom Dashboard Widgets . Widget Factory . // src/js/widgets/widget-factory.js class WidgetFactory { static createWidget(type, config) { switch (type) { case 'stat': return new StatWidget(config); case 'chart': return new ChartWidget(config); case 'list': return new ListWidget(config); case 'progress': return new ProgressWidget(config); default: throw new Error(`Unknown widget type: ${type}`); } } } class BaseWidget { constructor(config) { this.config = config; this.container = null; } render(container) { this.container = container; this.container.innerHTML = this.template(); this.afterRender(); } template() { return '&lt;div&gt;Base Widget&lt;/div&gt;'; } afterRender() { // Override in subclasses } destroy() { if (this.container) { this.container.innerHTML = ''; } } } class StatWidget extends BaseWidget { template() { return ` &lt;div class=\"x_panel tile fixed_height_320\"&gt; &lt;div class=\"x_title\"&gt; &lt;h2&gt;${this.config.title}&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"x_content\"&gt; &lt;div class=\"widget-stat\"&gt; &lt;div class=\"stat-icon\"&gt; &lt;i class=\"fa fa-${this.config.icon}\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"stat-content\"&gt; &lt;div class=\"stat-value\"&gt;${this.config.value}&lt;/div&gt; &lt;div class=\"stat-label\"&gt;${this.config.label}&lt;/div&gt; ${this.config.change ? ` &lt;div class=\"stat-change ${this.config.change &gt; 0 ? 'positive' : 'negative'}\"&gt; &lt;i class=\"fa fa-${this.config.change &gt; 0 ? 'arrow-up' : 'arrow-down'}\"&gt;&lt;/i&gt; ${Math.abs(this.config.change)}% &lt;/div&gt; ` : ''} &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; `; } } class ChartWidget extends BaseWidget { template() { return ` &lt;div class=\"x_panel\"&gt; &lt;div class=\"x_title\"&gt; &lt;h2&gt;${this.config.title}&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"x_content\"&gt; &lt;canvas id=\"chart-${this.config.id}\" width=\"400\" height=\"200\"&gt;&lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt; `; } afterRender() { this.initChart(); } async initChart() { const { Chart } = await import('chart.js/auto'); const ctx = document.getElementById(`chart-${this.config.id}`); new Chart(ctx, { type: this.config.chartType || 'line', data: this.config.data, options: { responsive: true, maintainAspectRatio: false, ...this.config.options } }); } } . Widget Configuration . // src/js/dashboard-config.js const dashboardConfig = { widgets: [ { id: 'users-stat', type: 'stat', grid: { x: 0, y: 0, w: 3, h: 1 }, config: { title: 'Total Users', value: '2,564', label: 'Active Users', icon: 'users', change: 12.5 } }, { id: 'revenue-stat', type: 'stat', grid: { x: 3, y: 0, w: 3, h: 1 }, config: { title: 'Revenue', value: '$52,147', label: 'This Month', icon: 'dollar', change: -3.2 } }, { id: 'sales-chart', type: 'chart', grid: { x: 0, y: 1, w: 6, h: 2 }, config: { title: 'Sales Overview', chartType: 'line', data: { labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'], datasets: [{ label: 'Sales', data: [12, 19, 3, 5, 2, 3], borderColor: '#73879C', backgroundColor: 'rgba(115, 135, 156, 0.1)' }] } } } ] }; // Initialize dashboard class Dashboard { constructor(config) { this.config = config; this.widgets = new Map(); this.container = document.getElementById('dashboard-container'); } init() { this.createGrid(); this.renderWidgets(); } createGrid() { this.container.className = 'dashboard-grid'; } renderWidgets() { this.config.widgets.forEach(widgetConfig =&gt; { const widget = WidgetFactory.createWidget( widgetConfig.type, widgetConfig.config ); const widgetContainer = this.createWidgetContainer(widgetConfig); widget.render(widgetContainer); this.widgets.set(widgetConfig.id, widget); }); } createWidgetContainer(config) { const container = document.createElement('div'); container.className = 'dashboard-widget'; container.style.gridColumn = `${config.grid.x + 1} / ${config.grid.x + config.grid.w + 1}`; container.style.gridRow = `${config.grid.y + 1} / ${config.grid.y + config.grid.h + 1}`; this.container.appendChild(container); return container; } } // Initialize dashboard new Dashboard(dashboardConfig).init(); . Form Builder . Dynamic Form Generator . // src/js/forms/form-builder.js class FormBuilder { constructor(container, schema) { this.container = container; this.schema = schema; this.fields = new Map(); } build() { const form = document.createElement('form'); form.className = 'dynamic-form'; form.setAttribute('data-validate', 'true'); this.schema.fields.forEach(fieldConfig =&gt; { const field = this.createField(fieldConfig); form.appendChild(field); }); // Add submit button if (this.schema.submit) { const submitBtn = this.createSubmitButton(this.schema.submit); form.appendChild(submitBtn); } this.container.appendChild(form); this.initializeValidation(); return form; } createField(config) { const fieldContainer = document.createElement('div'); fieldContainer.className = 'form-group row mb-3'; // Create label if (config.label) { const label = document.createElement('label'); label.className = 'col-form-label col-md-3 col-sm-3'; label.textContent = config.label; label.setAttribute('for', config.name); fieldContainer.appendChild(label); } // Create field wrapper const fieldWrapper = document.createElement('div'); fieldWrapper.className = 'col-md-6 col-sm-6'; // Create field based on type const field = this.createFieldByType(config); fieldWrapper.appendChild(field); // Add help text if (config.help) { const helpText = document.createElement('small'); helpText.className = 'form-text text-muted'; helpText.textContent = config.help; fieldWrapper.appendChild(helpText); } fieldContainer.appendChild(fieldWrapper); this.fields.set(config.name, field); return fieldContainer; } createFieldByType(config) { switch (config.type) { case 'text': case 'email': case 'password': case 'number': return this.createInput(config); case 'textarea': return this.createTextarea(config); case 'select': return this.createSelect(config); case 'checkbox': return this.createCheckbox(config); case 'radio': return this.createRadioGroup(config); case 'file': return this.createFileInput(config); case 'date': return this.createDateInput(config); default: return this.createInput(config); } } createInput(config) { const input = document.createElement('input'); input.type = config.type || 'text'; input.name = config.name; input.id = config.name; input.className = 'form-control'; if (config.placeholder) input.placeholder = config.placeholder; if (config.value) input.value = config.value; if (config.required) input.required = true; if (config.pattern) input.pattern = config.pattern; if (config.min) input.min = config.min; if (config.max) input.max = config.max; return input; } createSelect(config) { const select = document.createElement('select'); select.name = config.name; select.id = config.name; select.className = 'form-control'; if (config.multiple) { select.multiple = true; select.className += ' select2'; } if (config.placeholder) { const placeholderOption = document.createElement('option'); placeholderOption.value = ''; placeholderOption.textContent = config.placeholder; placeholderOption.disabled = true; placeholderOption.selected = true; select.appendChild(placeholderOption); } if (config.options) { config.options.forEach(option =&gt; { const optionElement = document.createElement('option'); optionElement.value = option.value; optionElement.textContent = option.label; if (option.selected) optionElement.selected = true; select.appendChild(optionElement); }); } return select; } createTextarea(config) { const textarea = document.createElement('textarea'); textarea.name = config.name; textarea.id = config.name; textarea.className = 'form-control'; textarea.rows = config.rows || 4; if (config.placeholder) textarea.placeholder = config.placeholder; if (config.value) textarea.value = config.value; if (config.required) textarea.required = true; return textarea; } getData() { const data = {}; this.fields.forEach((field, name) =&gt; { if (field.type === 'checkbox') { data[name] = field.checked; } else if (field.type === 'radio') { const checked = document.querySelector(`input[name=\"${name}\"]:checked`); data[name] = checked ? checked.value : null; } else { data[name] = field.value; } }); return data; } setData(data) { Object.entries(data).forEach(([name, value]) =&gt; { const field = this.fields.get(name); if (field) { if (field.type === 'checkbox') { field.checked = value; } else { field.value = value; } } }); } initializeValidation() { // Initialize form validation if Parsley is available if (window.Parsley) { const form = this.container.querySelector('form'); $(form).parsley(); } } } // Form schema example const userFormSchema = { fields: [ { name: 'firstName', type: 'text', label: 'First Name', placeholder: 'Enter first name', required: true }, { name: 'email', type: 'email', label: 'Email Address', placeholder: 'Enter email', required: true }, { name: 'role', type: 'select', label: 'Role', placeholder: 'Select role', options: [ { value: 'admin', label: 'Administrator' }, { value: 'user', label: 'User' }, { value: 'moderator', label: 'Moderator' } ], required: true }, { name: 'bio', type: 'textarea', label: 'Biography', placeholder: 'Tell us about yourself', rows: 4 } ], submit: { text: 'Create User', className: 'btn btn-primary' } }; // Usage const formContainer = document.getElementById('form-container'); const formBuilder = new FormBuilder(formContainer, userFormSchema); const form = formBuilder.build(); . ",
    "url": "/gentelella/customization/#component-customization",
    
    "relUrl": "/customization/#component-customization"
  },"36": {
    "doc": "Customization Guide",
    "title": "Advanced Customization",
    "content": "Plugin System . Plugin Architecture . // src/js/core/plugin-system.js class PluginSystem { constructor() { this.plugins = new Map(); this.hooks = new Map(); } registerPlugin(name, plugin) { if (this.plugins.has(name)) { console.warn(`Plugin ${name} already registered`); return; } // Initialize plugin if (typeof plugin.init === 'function') { plugin.init(this); } this.plugins.set(name, plugin); console.log(`Plugin ${name} registered successfully`); } getPlugin(name) { return this.plugins.get(name); } addHook(hookName, callback, priority = 10) { if (!this.hooks.has(hookName)) { this.hooks.set(hookName, []); } this.hooks.get(hookName).push({ callback, priority }); // Sort by priority this.hooks.get(hookName).sort((a, b) =&gt; a.priority - b.priority); } async executeHook(hookName, data = {}) { if (!this.hooks.has(hookName)) { return data; } const hooks = this.hooks.get(hookName); let result = data; for (const hook of hooks) { try { const hookResult = await hook.callback(result); if (hookResult !== undefined) { result = hookResult; } } catch (error) { console.error(`Error in hook ${hookName}:`, error); } } return result; } removeHook(hookName, callback) { if (!this.hooks.has(hookName)) return; const hooks = this.hooks.get(hookName); const index = hooks.findIndex(hook =&gt; hook.callback === callback); if (index &gt; -1) { hooks.splice(index, 1); } } } // Global plugin system instance window.GentelellaPlugins = new PluginSystem(); . Example Plugin . // src/js/plugins/notification-plugin.js const NotificationPlugin = { name: 'notifications', init(pluginSystem) { this.pluginSystem = pluginSystem; this.notifications = []; this.container = null; this.createContainer(); this.bindHooks(); }, createContainer() { this.container = document.createElement('div'); this.container.id = 'notification-container'; this.container.className = 'notification-container'; document.body.appendChild(this.container); }, bindHooks() { // Hook into form submissions this.pluginSystem.addHook('form.submit.success', (data) =&gt; { this.show('Form submitted successfully!', 'success'); return data; }); this.pluginSystem.addHook('form.submit.error', (data) =&gt; { this.show('Error submitting form', 'error'); return data; }); }, show(message, type = 'info', duration = 5000) { const notification = document.createElement('div'); notification.className = `notification notification-${type}`; notification.innerHTML = ` &lt;div class=\"notification-content\"&gt; &lt;i class=\"fa fa-${this.getIcon(type)}\"&gt;&lt;/i&gt; &lt;span&gt;${message}&lt;/span&gt; &lt;button class=\"notification-close\"&gt;&amp;times;&lt;/button&gt; &lt;/div&gt; `; // Add close functionality const closeBtn = notification.querySelector('.notification-close'); closeBtn.addEventListener('click', () =&gt; this.remove(notification)); // Auto remove after duration setTimeout(() =&gt; this.remove(notification), duration); this.container.appendChild(notification); this.notifications.push(notification); // Animate in requestAnimationFrame(() =&gt; { notification.classList.add('notification-show'); }); }, remove(notification) { notification.classList.add('notification-hide'); setTimeout(() =&gt; { if (notification.parentNode) { notification.parentNode.removeChild(notification); } const index = this.notifications.indexOf(notification); if (index &gt; -1) { this.notifications.splice(index, 1); } }, 300); }, getIcon(type) { const icons = { success: 'check-circle', error: 'exclamation-circle', warning: 'exclamation-triangle', info: 'info-circle' }; return icons[type] || icons.info; } }; // Register plugin window.GentelellaPlugins.registerPlugin('notifications', NotificationPlugin); . ",
    "url": "/gentelella/customization/#advanced-customization",
    
    "relUrl": "/customization/#advanced-customization"
  },"37": {
    "doc": "Customization Guide",
    "title": "Next Steps",
    "content": ". | API Integration - Connect with backend APIs | Security Guide - Implement security best practices | Testing Guide - Test your customizations | . 💡 Pro Tip: Start with small customizations and gradually build complexity. Always test your changes across different screen sizes and browsers to ensure compatibility. ",
    "url": "/gentelella/customization/#next-steps",
    
    "relUrl": "/customization/#next-steps"
  },"38": {
    "doc": "Deployment Guide",
    "title": "Deployment Guide",
    "content": "Complete guide to deploying Gentelella Admin Template to production environments . ",
    "url": "/gentelella/deployment/",
    
    "relUrl": "/deployment/"
  },"39": {
    "doc": "Deployment Guide",
    "title": "Table of contents",
    "content": ". | Pre-Deployment Checklist . | Build Optimization | Environment Configuration . | Production Environment Variables | Build Configuration | . | . | Static Hosting Platforms . | Netlify Deployment . | Method 1: Git Integration (Recommended) | Method 2: Manual Deploy | Netlify Configuration | . | Vercel Deployment . | Git Integration | Manual Deployment | Vercel Configuration | . | GitHub Pages . | GitHub Actions Deployment | Update Vite Configuration for GitHub Pages | . | . | Server Hosting . | Nginx Configuration . | Basic Setup | SSL with Let’s Encrypt | . | Apache Configuration . | Virtual Host Setup | . | . | Container Deployment . | Docker Setup . | Dockerfile | Docker Nginx Configuration | Docker Compose | . | Kubernetes Deployment . | Deployment Configuration | Service Configuration | Ingress Configuration | . | . | CI/CD Pipelines . | GitHub Actions . | Complete CI/CD Pipeline | . | GitLab CI/CD | . | Monitoring and Maintenance . | Health Checks . | Basic Health Check Endpoint | Service Worker Health Check | . | Error Tracking . | Sentry Integration | . | Performance Monitoring | . | Security Considerations . | Content Security Policy | Environment Secrets | HTTPS Enforcement | . | Troubleshooting . | Common Deployment Issues . | 1. Build Failures | 2. Asset Loading Issues | 3. API Connection Issues | . | . | Next Steps | . ",
    "url": "/gentelella/deployment/#table-of-contents",
    
    "relUrl": "/deployment/#table-of-contents"
  },"40": {
    "doc": "Deployment Guide",
    "title": "Pre-Deployment Checklist",
    "content": "Build Optimization . Before deploying, ensure your build is optimized: . # Run production build npm run build # Analyze bundle sizes npm run build:analyze # Run performance optimizations npm run optimize # Test production build locally npm run preview . Environment Configuration . Production Environment Variables . Create .env.production: . # API Configuration VITE_API_URL=https://api.yoursite.com VITE_APP_NAME=Gentelella Admin VITE_DEBUG_MODE=false # CDN Configuration VITE_CDN_URL=https://cdn.yoursite.com VITE_ASSETS_URL=https://assets.yoursite.com # Performance Settings VITE_PRELOAD_MODULES=charts,forms VITE_ENABLE_SERVICE_WORKER=true # Analytics VITE_GA_TRACKING_ID=UA-XXXXXXXX-X VITE_HOTJAR_ID=XXXXXXX . Build Configuration . Ensure vite.config.js has production optimizations: . export default defineConfig({ base: '/your-app-path/', // Set if not deploying to root build: { // Output directory outDir: 'dist', // Asset directory assetsDir: 'assets', // Source maps for production debugging sourcemap: process.env.NODE_ENV === 'development', // Minification minify: 'terser', terserOptions: { compress: { drop_console: true, drop_debugger: true } }, // Chunk size warning limit chunkSizeWarningLimit: 1000, rollupOptions: { output: { // Manual chunk splitting for optimal loading manualChunks: { 'vendor-core': ['bootstrap', '@popperjs/core'], 'vendor-charts': ['chart.js', 'morris.js'], 'vendor-forms': ['select2', 'tempus-dominus'], 'vendor-tables': ['datatables.net'], 'vendor-utils': ['dayjs', 'nprogress'] } } } } }); . ",
    "url": "/gentelella/deployment/#pre-deployment-checklist",
    
    "relUrl": "/deployment/#pre-deployment-checklist"
  },"41": {
    "doc": "Deployment Guide",
    "title": "Static Hosting Platforms",
    "content": "Netlify Deployment . Method 1: Git Integration (Recommended) . | Connect Repository . | Push your code to GitHub/GitLab/Bitbucket | Connect repository in Netlify dashboard | . | Configure Build Settings Build command: npm run build Publish directory: dist . | Environment Variables Set in Netlify dashboard under Site Settings → Environment Variables: VITE_API_URL=https://api.yoursite.com VITE_APP_NAME=Gentelella Admin NODE_VERSION=18 . | Custom Domain . | Add custom domain in Site Settings → Domain Management | Configure DNS records | . | . Method 2: Manual Deploy . # Build the project npm run build # Install Netlify CLI npm install -g netlify-cli # Deploy to Netlify netlify deploy --prod --dir=dist . Netlify Configuration . Create netlify.toml: . [build] command = \"npm run build\" publish = \"dist\" [build.environment] NODE_VERSION = \"18\" [[redirects]] from = \"/*\" to = \"/index.html\" status = 200 [[headers]] for = \"/assets/*\" [headers.values] Cache-Control = \"public, max-age=31536000, immutable\" [[headers]] for = \"/*.html\" [headers.values] Cache-Control = \"public, max-age=3600\" . Vercel Deployment . Git Integration . | Connect Repository . | Import project from GitHub/GitLab | Vercel auto-detects Vite configuration | . | Build Configuration Vercel automatically detects these settings: { \"buildCommand\": \"npm run build\", \"outputDirectory\": \"dist\", \"installCommand\": \"npm install\" } . | Environment Variables Set in Vercel dashboard: VITE_API_URL=https://api.yoursite.com VITE_APP_NAME=Gentelella Admin . | . Manual Deployment . # Install Vercel CLI npm install -g vercel # Deploy vercel --prod . Vercel Configuration . Create vercel.json: . { \"builds\": [ { \"src\": \"package.json\", \"use\": \"@vercel/static-build\", \"config\": { \"distDir\": \"dist\" } } ], \"routes\": [ { \"handle\": \"filesystem\" }, { \"src\": \"/(.*)\", \"dest\": \"/index.html\" } ], \"headers\": [ { \"source\": \"/assets/(.*)\", \"headers\": [ { \"key\": \"Cache-Control\", \"value\": \"public, max-age=31536000, immutable\" } ] } ] } . GitHub Pages . GitHub Actions Deployment . Create .github/workflows/deploy.yml: . name: Deploy to GitHub Pages on: push: branches: [ main ] jobs: deploy: runs-on: ubuntu-latest permissions: contents: read pages: write id-token: write steps: - name: Checkout uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '18' cache: 'npm' - name: Install dependencies run: npm ci - name: Build run: npm run build env: VITE_BASE_URL: /your-repo-name/ - name: Setup Pages uses: actions/configure-pages@v3 - name: Upload artifact uses: actions/upload-pages-artifact@v2 with: path: ./dist - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2 . Update Vite Configuration for GitHub Pages . // vite.config.js export default defineConfig({ base: process.env.NODE_ENV === 'production' ? '/your-repo-name/' : '/', // ... rest of configuration }); . ",
    "url": "/gentelella/deployment/#static-hosting-platforms",
    
    "relUrl": "/deployment/#static-hosting-platforms"
  },"42": {
    "doc": "Deployment Guide",
    "title": "Server Hosting",
    "content": "Nginx Configuration . Basic Setup . # /etc/nginx/sites-available/gentelella server { listen 80; server_name yoursite.com www.yoursite.com; root /var/www/gentelella/dist; index index.html; # Gzip compression gzip on; gzip_vary on; gzip_min_length 1024; gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json; # Security headers add_header X-Frame-Options \"SAMEORIGIN\" always; add_header X-XSS-Protection \"1; mode=block\" always; add_header X-Content-Type-Options \"nosniff\" always; add_header Referrer-Policy \"no-referrer-when-downgrade\" always; add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always; # Cache static assets location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ { expires 1y; add_header Cache-Control \"public, immutable\"; } # Handle SPA routing location / { try_files $uri $uri/ /index.html; } # API proxy (if needed) location /api/ { proxy_pass http://localhost:8080/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } . SSL with Let’s Encrypt . # Install Certbot sudo apt install certbot python3-certbot-nginx # Get SSL certificate sudo certbot --nginx -d yoursite.com -d www.yoursite.com # Auto-renewal (add to crontab) 0 12 * * * /usr/bin/certbot renew --quiet . Apache Configuration . Virtual Host Setup . # /etc/apache2/sites-available/gentelella.conf &lt;VirtualHost *:80&gt; ServerName yoursite.com ServerAlias www.yoursite.com DocumentRoot /var/www/gentelella/dist # Enable compression LoadModule deflate_module modules/mod_deflate.so &lt;Location /&gt; SetOutputFilter DEFLATE SetEnvIfNoCase Request_URI \\ \\.(?:gif|jpe?g|png)$ no-gzip dont-vary SetEnvIfNoCase Request_URI \\ \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary &lt;/Location&gt; # Cache static assets &lt;LocationMatch \"\\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2)$\"&gt; ExpiresActive On ExpiresDefault \"access plus 1 year\" Header append Cache-Control \"public, immutable\" &lt;/LocationMatch&gt; # Handle SPA routing &lt;Directory /var/www/gentelella/dist&gt; RewriteEngine On RewriteBase / RewriteRule ^index\\.html$ - [L] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.html [L] &lt;/Directory&gt; ErrorLog ${APACHE_LOG_DIR}/gentelella_error.log CustomLog ${APACHE_LOG_DIR}/gentelella_access.log combined &lt;/VirtualHost&gt; . ",
    "url": "/gentelella/deployment/#server-hosting",
    
    "relUrl": "/deployment/#server-hosting"
  },"43": {
    "doc": "Deployment Guide",
    "title": "Container Deployment",
    "content": "Docker Setup . Dockerfile . # Build stage FROM node:18-alpine as build-stage WORKDIR /app COPY package*.json ./ RUN npm ci --only=production COPY . RUN npm run build # Production stage FROM nginx:alpine as production-stage COPY --from=build-stage /app/dist /usr/share/nginx/html # Copy nginx configuration COPY nginx.conf /etc/nginx/nginx.conf EXPOSE 80 CMD [\"nginx\", \"-g\", \"daemon off;\"] . Docker Nginx Configuration . # nginx.conf events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; gzip on; gzip_vary on; gzip_min_length 1024; gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json; server { listen 80; server_name localhost; root /usr/share/nginx/html; index index.html index.htm; location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ { expires 1y; add_header Cache-Control \"public, immutable\"; } location / { try_files $uri $uri/ /index.html; } } } . Docker Compose . # docker-compose.yml version: '3.8' services: gentelella: build: . ports: - \"80:80\" environment: - NODE_ENV=production restart: unless-stopped # Optional: Add database, Redis, etc. database: image: postgres:14-alpine environment: POSTGRES_DB: gentelella POSTGRES_USER: admin POSTGRES_PASSWORD: password volumes: - postgres_data:/var/lib/postgresql/data volumes: postgres_data: . Kubernetes Deployment . Deployment Configuration . # k8s/deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: gentelella labels: app: gentelella spec: replicas: 3 selector: matchLabels: app: gentelella template: metadata: labels: app: gentelella spec: containers: - name: gentelella image: your-registry/gentelella:latest ports: - containerPort: 80 env: - name: NODE_ENV value: \"production\" resources: requests: memory: \"64Mi\" cpu: \"250m\" limits: memory: \"128Mi\" cpu: \"500m\" . Service Configuration . # k8s/service.yaml apiVersion: v1 kind: Service metadata: name: gentelella-service spec: selector: app: gentelella ports: - protocol: TCP port: 80 targetPort: 80 type: LoadBalancer . Ingress Configuration . # k8s/ingress.yaml apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: gentelella-ingress annotations: kubernetes.io/ingress.class: nginx cert-manager.io/cluster-issuer: letsencrypt-prod spec: tls: - hosts: - yoursite.com secretName: gentelella-tls rules: - host: yoursite.com http: paths: - path: / pathType: Prefix backend: service: name: gentelella-service port: number: 80 . ",
    "url": "/gentelella/deployment/#container-deployment",
    
    "relUrl": "/deployment/#container-deployment"
  },"44": {
    "doc": "Deployment Guide",
    "title": "CI/CD Pipelines",
    "content": "GitHub Actions . Complete CI/CD Pipeline . # .github/workflows/ci-cd.yml name: CI/CD Pipeline on: push: branches: [ main, develop ] pull_request: branches: [ main ] env: NODE_VERSION: '18' jobs: test: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: $ cache: 'npm' - name: Install dependencies run: npm ci - name: Run linting run: npm run lint - name: Run tests run: npm run test - name: Build project run: npm run build - name: Run performance audit run: npm run optimize deploy-staging: needs: test runs-on: ubuntu-latest if: github.ref == 'refs/heads/develop' steps: - name: Checkout code uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: $ cache: 'npm' - name: Install dependencies run: npm ci - name: Build for staging run: npm run build env: VITE_API_URL: $ VITE_APP_NAME: Gentelella Admin (Staging) - name: Deploy to staging uses: peaceiris/actions-gh-pages@v3 with: github_token: $ publish_dir: ./dist destination_dir: staging deploy-production: needs: test runs-on: ubuntu-latest if: github.ref == 'refs/heads/main' steps: - name: Checkout code uses: actions/checkout@v3 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: $ cache: 'npm' - name: Install dependencies run: npm ci - name: Build for production run: npm run build env: VITE_API_URL: $ VITE_APP_NAME: Gentelella Admin - name: Deploy to Netlify uses: nwtgck/actions-netlify@v2.0 with: publish-dir: './dist' production-branch: main github-token: $ deploy-message: \"Deploy from GitHub Actions\" env: NETLIFY_AUTH_TOKEN: $ NETLIFY_SITE_ID: $ . GitLab CI/CD . # .gitlab-ci.yml stages: - test - build - deploy variables: NODE_VERSION: \"18\" cache: paths: - node_modules/ test: stage: test image: node:$NODE_VERSION script: - npm ci - npm run lint - npm run test - npm run build build-staging: stage: build image: node:$NODE_VERSION script: - npm ci - npm run build artifacts: paths: - dist/ expire_in: 1 hour only: - develop build-production: stage: build image: node:$NODE_VERSION script: - npm ci - npm run build artifacts: paths: - dist/ expire_in: 1 hour only: - main deploy-staging: stage: deploy image: alpine:latest script: - apk add --no-cache curl - curl -X POST \"$STAGING_WEBHOOK_URL\" dependencies: - build-staging only: - develop deploy-production: stage: deploy image: alpine:latest script: - apk add --no-cache curl - curl -X POST \"$PRODUCTION_WEBHOOK_URL\" dependencies: - build-production only: - main . ",
    "url": "/gentelella/deployment/#cicd-pipelines",
    
    "relUrl": "/deployment/#cicd-pipelines"
  },"45": {
    "doc": "Deployment Guide",
    "title": "Monitoring and Maintenance",
    "content": "Health Checks . Basic Health Check Endpoint . // health.js export function setupHealthCheck() { // Simple health check if (window.location.pathname === '/health') { document.body.innerHTML = JSON.stringify({ status: 'healthy', timestamp: new Date().toISOString(), version: process.env.npm_package_version }); } } . Service Worker Health Check . // sw.js self.addEventListener('message', event =&gt; { if (event.data &amp;&amp; event.data.type === 'HEALTH_CHECK') { event.ports[0].postMessage({ status: 'healthy', timestamp: new Date().toISOString() }); } }); . Error Tracking . Sentry Integration . import * as Sentry from \"@sentry/browser\"; Sentry.init({ dsn: process.env.VITE_SENTRY_DSN, environment: process.env.NODE_ENV, tracesSampleRate: 1.0, }); // Custom error boundary window.addEventListener('error', (event) =&gt; { Sentry.captureException(event.error); }); window.addEventListener('unhandledrejection', (event) =&gt; { Sentry.captureException(event.reason); }); . Performance Monitoring . &lt;!-- Real User Monitoring --&gt; &lt;script&gt; // Monitor Core Web Vitals import {getCLS, getFID, getFCP, getLCP, getTTFB} from 'web-vitals'; function sendToAnalytics(metric) { fetch('/analytics', { method: 'POST', body: JSON.stringify(metric), headers: {'Content-Type': 'application/json'} }); } getCLS(sendToAnalytics); getFID(sendToAnalytics); getFCP(sendToAnalytics); getLCP(sendToAnalytics); getTTFB(sendToAnalytics); &lt;/script&gt; . ",
    "url": "/gentelella/deployment/#monitoring-and-maintenance",
    
    "relUrl": "/deployment/#monitoring-and-maintenance"
  },"46": {
    "doc": "Deployment Guide",
    "title": "Security Considerations",
    "content": "Content Security Policy . &lt;!-- Add to index.html --&gt; &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:;\"&gt; . Environment Secrets . # Use environment variables for sensitive data export VITE_API_KEY=\"your-api-key\" export DATABASE_URL=\"postgresql://user:pass@host:port/db\" # Never commit .env files with secrets echo \".env.local\" &gt;&gt; .gitignore echo \".env.production\" &gt;&gt; .gitignore . HTTPS Enforcement . // Redirect HTTP to HTTPS in production if (location.protocol !== 'https:' &amp;&amp; location.hostname !== 'localhost') { location.replace(`https:${location.href.substring(location.protocol.length)}`); } . ",
    "url": "/gentelella/deployment/#security-considerations",
    
    "relUrl": "/deployment/#security-considerations"
  },"47": {
    "doc": "Deployment Guide",
    "title": "Troubleshooting",
    "content": "Common Deployment Issues . 1. Build Failures . # Clear cache and reinstall rm -rf node_modules package-lock.json npm install # Check Node.js version node --version npm --version . 2. Asset Loading Issues . // Check base URL configuration // vite.config.js export default defineConfig({ base: process.env.NODE_ENV === 'production' ? '/your-app-path/' : '/', }); . 3. API Connection Issues . // Check CORS configuration // vite.config.js export default defineConfig({ server: { proxy: { '/api': { target: 'http://localhost:8080', changeOrigin: true, secure: false } } } }); . ",
    "url": "/gentelella/deployment/#troubleshooting",
    
    "relUrl": "/deployment/#troubleshooting"
  },"48": {
    "doc": "Deployment Guide",
    "title": "Next Steps",
    "content": ". | Monitoring Setup - Set up comprehensive monitoring | Security Guide - Implement security best practices | API Integration - Connect with backend APIs | . 💡 Pro Tip: Always test your deployment in a staging environment that mirrors production before deploying to production. Use feature flags to safely roll out new features. ",
    "url": "/gentelella/deployment/#next-steps",
    
    "relUrl": "/deployment/#next-steps"
  },"49": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "Gentelella Admin Template Documentation",
    "content": "Modern Bootstrap 5 Admin Dashboard Template with Vite Build System &amp; Performance Optimizations . Get Started Now View on GitHub . ",
    "url": "/gentelella/",
    
    "relUrl": "/"
  },"50": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "Welcome to Gentelella v2.0",
    "content": "Gentelella is a modern, powerful, and completely free Bootstrap 5 admin template that has been completely rebuilt with Vite, performance optimizations, and the latest web technologies. ✨ What’s New in Version 2.0 . | 🚀 90% smaller initial bundle (779KB → 79KB) | ⚡ 40-70% faster page loads with intelligent code splitting | 📦 Modern Build System with Vite 6.3.5 | 🎨 Bootstrap 5.3.6 with updated design system | 🧩 Smart Module Loading - Load only what you need | 📱 Mobile-First responsive design | . 📊 Performance Metrics . | Metric | Before | After | Improvement | . | Initial Bundle Size | 779 KB | 79 KB | 90% smaller | . | Total Page Load | 1.3 MB | 770 KB | 40% reduction | . | First Contentful Paint | 2.1s | 0.8s | 62% faster | . | Time to Interactive | 3.5s | 1.2s | 66% faster | . ",
    "url": "/gentelella/#welcome-to-gentelella-v20",
    
    "relUrl": "/#welcome-to-gentelella-v20"
  },"51": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "Quick Start",
    "content": "Prerequisites . | Node.js (v16 or higher) | npm, yarn, or pnpm package manager | . Installation . # Clone the repository git clone https://github.com/puikinsh/gentelella.git cd gentelella # Install dependencies npm install # Start development server npm run dev # Your server will be running at http://localhost:3000 . Alternative Installation . # npm package npm install gentelella --save # yarn package yarn add gentelella . ",
    "url": "/gentelella/#quick-start",
    
    "relUrl": "/#quick-start"
  },"52": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "Features Overview",
    "content": "🏠 Dashboard Components . | 3 Dashboard Layouts - Different styles for various use cases | Widget Cards - Revenue, stats, progress indicators | Real-time Charts - Live data visualization | Activity Feeds - User activity and notifications | . 📊 Data Visualization . | Chart.js Integration - Modern, responsive charts | Morris.js Charts - Beautiful time-series graphs | Interactive Maps - World maps with jVectorMap | Gauge Charts - Animated gauge displays | . 📝 Form Components . | Multi-step Wizards - Complex form workflows | Rich Text Editors - WYSIWYG content editing | File Upload - Drag &amp; drop with progress tracking | Advanced Selects - Searchable, multi-select dropdowns | . 📋 Table Components . | DataTables - Advanced sorting, filtering, pagination | Responsive Tables - Mobile-optimized displays | Export Functions - PDF, Excel, CSV export options | . ",
    "url": "/gentelella/#features-overview",
    
    "relUrl": "/#features-overview"
  },"53": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "Technology Stack",
    "content": "Core Technologies . | Bootstrap 5.3.6 - CSS Framework | Vite 6.3.5 - Build Tool | SASS - CSS Preprocessor | jQuery 3.6.1 - DOM Manipulation* | . *jQuery is being phased out in favor of vanilla JavaScript . Chart Libraries . | Chart.js 4.4.2 - Modern responsive charts | Morris.js - Time-series line graphs | jVectorMap - Interactive world maps | Gauge.js - Beautiful animated gauges | . Form Libraries . | Select2 - Enhanced dropdown selections | Tempus Dominus - Bootstrap 5 date/time picker | Ion.RangeSlider - Advanced range controls | DataTables - Advanced table functionality | . ",
    "url": "/gentelella/#technology-stack",
    
    "relUrl": "/#technology-stack"
  },"54": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "Browser Support",
    "content": "| Browser | Version | . | Chrome | 88+ | . | Firefox | 85+ | . | Safari | 14+ | . | Edge | 88+ | . | Opera | 74+ | . Internet Explorer is not supported - We focus on modern browsers for the best performance and features. ",
    "url": "/gentelella/#browser-support",
    
    "relUrl": "/#browser-support"
  },"55": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "License",
    "content": "MIT License - Free for personal and commercial use with attribution to Colorlib. ",
    "url": "/gentelella/#license",
    
    "relUrl": "/#license"
  },"56": {
    "doc": "Gentelella Admin Template Documentation",
    "title": "Next Steps",
    "content": ". | Installation Guide - Detailed setup instructions | Configuration - Customize the template | Components - Explore all available components | Performance - Optimization strategies | Deployment - Deploy to production | . Made with ❤️ by Colorlib . ",
    "url": "/gentelella/#next-steps",
    
    "relUrl": "/#next-steps"
  },"57": {
    "doc": "Installation Guide",
    "title": "Installation Guide",
    "content": "Complete installation and setup instructions for Gentelella Admin Template . ",
    "url": "/gentelella/installation/",
    
    "relUrl": "/installation/"
  },"58": {
    "doc": "Installation Guide",
    "title": "Table of contents",
    "content": ". | System Requirements . | Prerequisites | Browser Support | . | Installation Methods . | Method 1: Git Clone (Recommended) | Method 2: Download ZIP | Method 3: npm Package | Method 4: Yarn Package | Method 5: Bower (Legacy) | . | Project Structure | Development Commands . | Basic Commands | Advanced Commands | . | Configuration . | Environment Setup | Vite Configuration | SASS Configuration | . | Verification . | Check Installation | Test All Pages | Performance Check | . | Troubleshooting . | Common Issues . | 1. Node.js Version Issues | 2. Port Already in Use | 3. SASS Compilation Errors | 4. Module Not Found | 5. Build Failures | . | Getting Help | . | Next Steps | . ",
    "url": "/gentelella/installation/#table-of-contents",
    
    "relUrl": "/installation/#table-of-contents"
  },"59": {
    "doc": "Installation Guide",
    "title": "System Requirements",
    "content": "Prerequisites . Before installing Gentelella, ensure you have the following installed: . | Node.js (v16 or higher) - Download here | npm (comes with Node.js) or yarn package manager | Git (for cloning the repository) | A modern code editor (VS Code recommended) | . Browser Support . Gentelella supports all modern browsers: . | Browser | Minimum Version | . | Chrome | 88+ | . | Firefox | 85+ | . | Safari | 14+ | . | Edge | 88+ | . | Opera | 74+ | . Note: Internet Explorer is not supported. ",
    "url": "/gentelella/installation/#system-requirements",
    
    "relUrl": "/installation/#system-requirements"
  },"60": {
    "doc": "Installation Guide",
    "title": "Installation Methods",
    "content": "Method 1: Git Clone (Recommended) . This is the recommended method for development and customization: . # Clone the repository git clone https://github.com/puikinsh/gentelella.git # Navigate to the project directory cd gentelella # Install dependencies npm install # Start the development server npm run dev . Your development server will be running at http://localhost:3000 . Method 2: Download ZIP . | Visit GitHub repository | Click “Code” → “Download ZIP” | Extract the ZIP file | Open terminal in the extracted folder | Run npm install | Run npm run dev | . Method 3: npm Package . Install as a dependency in your existing project: . npm install gentelella --save . Method 4: Yarn Package . If you prefer Yarn: . yarn add gentelella . Method 5: Bower (Legacy) . For legacy projects using Bower: . bower install gentelella --save . ",
    "url": "/gentelella/installation/#installation-methods",
    
    "relUrl": "/installation/#installation-methods"
  },"61": {
    "doc": "Installation Guide",
    "title": "Project Structure",
    "content": "After installation, your project structure will look like this: . gentelella/ ├── 📁 docs/ # Documentation files ├── 📁 production/ # HTML templates &amp; assets │ ├── 📄 index.html # Main dashboard │ ├── 📄 form.html # Form examples │ ├── 📄 tables.html # Table examples │ ├── 📄 charts.html # Chart examples │ ├── 📄 [38 more pages] # Complete admin coverage │ └── 📁 images/ # Image assets ├── 📁 src/ # Source files │ ├── 📄 main-core.js # Core bundle (79KB) │ ├── 📄 main.js # Full bundle (779KB) │ ├── 📄 main.scss # Styles entry point │ ├── 📁 js/ # Custom JavaScript │ ├── 📁 scss/ # Custom SASS files │ └── 📁 modules/ # Smart loading modules │ ├── 📄 charts.js # Chart libraries (219KB) │ ├── 📄 forms.js # Form enhancements (200KB) │ ├── 📄 tables.js # DataTables functionality │ ├── 📄 dashboard.js # Dashboard widgets │ └── 📄 utils.js # Utility functions ├── 📁 dist/ # Production build output ├── 📁 scripts/ # Build &amp; optimization tools ├── 📁 vendors/ # Third-party libraries ├── 📄 vite.config.js # Vite configuration ├── 📄 package.json # Dependencies &amp; scripts └── 📄 README.md # Basic documentation . ",
    "url": "/gentelella/installation/#project-structure",
    
    "relUrl": "/installation/#project-structure"
  },"62": {
    "doc": "Installation Guide",
    "title": "Development Commands",
    "content": "Basic Commands . # Start development server with hot reload npm run dev # Build for production npm run build # Preview production build locally npm run preview . Advanced Commands . # Build with bundle analysis npm run build:analyze # Performance optimization analysis npm run optimize # SASS compilation only npm run sass:watch # JavaScript linting npm run lint # Code formatting npm run format . ",
    "url": "/gentelella/installation/#development-commands",
    
    "relUrl": "/installation/#development-commands"
  },"63": {
    "doc": "Installation Guide",
    "title": "Configuration",
    "content": "Environment Setup . | Development Environment npm run dev . | Hot reload enabled | Source maps available | All modules loaded for development | . | Production Environment npm run build npm run preview . | Optimized bundles | Minified assets | Smart code splitting | . | . Vite Configuration . The template includes an optimized vite.config.js with: . | Entry Points: All 42 HTML files configured | Code Splitting: Automatic vendor/app separation | Asset Optimization: Images, fonts, and static files | Development Features: Hot reload, source maps | Production Optimizations: Minification, compression | . SASS Configuration . SASS is configured in src/main.scss: . // Modern @use syntax (recommended) @use \"bootstrap/scss/bootstrap\"; @use \"./scss/custom.scss\"; // Legacy @import syntax (deprecated but still works) // @import \"bootstrap/scss/bootstrap\"; // @import \"./scss/custom.scss\"; . ",
    "url": "/gentelella/installation/#configuration",
    
    "relUrl": "/installation/#configuration"
  },"64": {
    "doc": "Installation Guide",
    "title": "Verification",
    "content": "Check Installation . After installation, verify everything is working: . | Start the development server: npm run dev . | Open your browser and navigate to http://localhost:3000 . | You should see the Gentelella dashboard | . Test All Pages . Navigate through different pages to ensure all modules load correctly: . | Dashboard pages (index.html, index2.html, index3.html) | Form pages (form.html, form_advanced.html, form_validation.html) | Table pages (tables.html, tables_dynamic.html) | Chart pages (chartjs.html, chartjs2.html, morisjs.html) | . Performance Check . Run the optimization analysis: . npm run optimize . This will show you: . | Bundle sizes | Loading times | Optimization recommendations | . ",
    "url": "/gentelella/installation/#verification",
    
    "relUrl": "/installation/#verification"
  },"65": {
    "doc": "Installation Guide",
    "title": "Troubleshooting",
    "content": "Common Issues . 1. Node.js Version Issues . Error: npm ERR! engine Unsupported engine . Solution: Update Node.js to version 16 or higher: . # Check current version node --version # Update Node.js from https://nodejs.org/ . 2. Port Already in Use . Error: Port 3000 is already in use . Solution: Either stop the conflicting process or use a different port: . # Use different port npm run dev -- --port 3001 . 3. SASS Compilation Errors . Error: SASS deprecation warnings . Solution: These are mainly from Bootstrap internal files and can be safely ignored. Our project code uses modern SASS syntax. 4. Module Not Found . Error: Cannot resolve module . Solution: Clear cache and reinstall: . # Delete node_modules and package-lock.json rm -rf node_modules package-lock.json # Reinstall dependencies npm install . 5. Build Failures . Error: Build process fails . Solution: Check for file permission issues and ensure all dependencies are installed: . # Clear cache npm cache clean --force # Reinstall npm install # Try building again npm run build . Getting Help . If you encounter issues not covered here: . | Check GitHub Issues: github.com/puikinsh/gentelella/issues | Create New Issue: Provide detailed error messages and system information | Community Support: Join discussions on GitHub | Documentation: Check other sections of this documentation | . ",
    "url": "/gentelella/installation/#troubleshooting",
    
    "relUrl": "/installation/#troubleshooting"
  },"66": {
    "doc": "Installation Guide",
    "title": "Next Steps",
    "content": "After successful installation: . | Configuration Guide - Customize the template | Components Overview - Explore available components | Performance Guide - Optimize your build | Customization - Add your own styles and features | . 💡 Pro Tip: Use npm run dev during development for the best experience with hot reload and source maps. Only use npm run build when you’re ready to deploy to production. ",
    "url": "/gentelella/installation/#next-steps",
    
    "relUrl": "/installation/#next-steps"
  },"67": {
    "doc": "Performance Guide",
    "title": "Performance Optimization",
    "content": "Complete guide to optimizing Gentelella Admin Template for maximum performance . ",
    "url": "/gentelella/performance/#performance-optimization",
    
    "relUrl": "/performance/#performance-optimization"
  },"68": {
    "doc": "Performance Guide",
    "title": "Table of contents",
    "content": ". | Performance Overview . | Performance Metrics | . | Smart Loading System . | Core vs. Module Architecture . | Core Bundle (79KB) - Always Loaded | Conditional Modules - Loaded on Demand | . | Module Loading Strategy | . | Bundle Optimization . | Manual Chunk Splitting | Tree Shaking | . | Asset Optimization . | Image Optimization . | Responsive Images | WebP Format with Fallback | Lazy Loading | . | Font Optimization . | Font Loading Strategy | Subset Fonts | . | . | Caching Strategies . | Browser Caching . | Vite Asset Hashing | Service Worker Implementation | . | CDN Integration | . | Runtime Performance . | Efficient DOM Manipulation . | Batch DOM Updates | Event Delegation | . | Memory Management . | Cleanup Event Listeners | Debounce Expensive Operations | . | . | Monitoring and Analysis . | Performance Monitoring . | Core Web Vitals | Performance Observer | . | Bundle Analysis . | Webpack Bundle Analyzer | Lighthouse CI | . | . | Performance Checklist . | Development Phase | Asset Optimization | Caching Strategy | Runtime Performance | Monitoring | . | Advanced Optimization Techniques . | Preloading Strategies . | Module Preloading | Predictive Loading | . | Critical Path Optimization . | Critical CSS Inlining | Resource Hints | . | . | Next Steps | . ",
    "url": "/gentelella/performance/#table-of-contents",
    
    "relUrl": "/performance/#table-of-contents"
  },"69": {
    "doc": "Performance Guide",
    "title": "Performance Overview",
    "content": "Gentelella v2.0 includes significant performance improvements over the original version: . Performance Metrics . | Metric | v1.0 | v2.0 | Improvement | . | Initial Bundle Size | 779 KB | 79 KB | 90% smaller | . | Total Page Load | 1.3 MB | 770 KB | 40% reduction | . | First Contentful Paint | 2.1s | 0.8s | 62% faster | . | Time to Interactive | 3.5s | 1.2s | 66% faster | . | Largest Contentful Paint | 2.8s | 1.1s | 61% faster | . | Cumulative Layout Shift | 0.15 | 0.03 | 80% improvement | . ",
    "url": "/gentelella/performance/#performance-overview",
    
    "relUrl": "/performance/#performance-overview"
  },"70": {
    "doc": "Performance Guide",
    "title": "Smart Loading System",
    "content": "Core vs. Module Architecture . The template uses a two-tier loading system: . Core Bundle (79KB) - Always Loaded . Essential functionality that every page needs: . // src/main-core.js import 'bootstrap/dist/js/bootstrap.bundle.min.js'; import './js/custom.min.js'; // Initialize tooltips and popovers document.addEventListener('DOMContentLoaded', function() { // Bootstrap components initialization const tooltips = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'); tooltips.forEach(tooltip =&gt; new bootstrap.Tooltip(tooltip)); const popovers = document.querySelectorAll('[data-bs-toggle=\"popover\"]'); popovers.forEach(popover =&gt; new bootstrap.Popover(popover)); }); . Conditional Modules - Loaded on Demand . Charts Module (219KB) . // Only loads when chart elements are detected if (document.querySelector('.chart-container')) { const charts = await import('./modules/charts.js'); charts.initializeCharts(); } . Forms Module (200KB) . // Only loads on pages with enhanced forms if (document.querySelector('.select2, .datepicker, .form-wizard')) { const forms = await import('./modules/forms.js'); forms.initializeForms(); } . Tables Module . // Only loads when DataTables are needed if (document.querySelector('.datatable')) { const tables = await import('./modules/tables.js'); tables.initializeTables(); } . Module Loading Strategy . // Smart module detection and loading export async function loadRequiredModules() { const modules = []; // Check for chart requirements if (document.querySelector('canvas, .morris-chart, .sparkline')) { modules.push(import('./modules/charts.js')); } // Check for form enhancements if (document.querySelector('.select2, .datepicker, .ion-range-slider')) { modules.push(import('./modules/forms.js')); } // Check for table features if (document.querySelector('.datatable, table[data-table]')) { modules.push(import('./modules/tables.js')); } // Check for dashboard widgets if (document.querySelector('.dashboard-widget, .tile_count')) { modules.push(import('./modules/dashboard.js')); } // Load all required modules in parallel const loadedModules = await Promise.all(modules); // Initialize each module loadedModules.forEach(module =&gt; { if (module.initialize) { module.initialize(); } }); } . ",
    "url": "/gentelella/performance/#smart-loading-system",
    
    "relUrl": "/performance/#smart-loading-system"
  },"71": {
    "doc": "Performance Guide",
    "title": "Bundle Optimization",
    "content": "Manual Chunk Splitting . The Vite configuration includes optimized chunk splitting: . // vite.config.js export default defineConfig({ build: { rollupOptions: { output: { manualChunks: { // Core vendor libraries (loaded on every page) 'vendor-core': [ 'bootstrap', '@popperjs/core' ], // Chart libraries (loaded only when needed) 'vendor-charts': [ 'chart.js', 'morris.js', 'gauge.js', 'jquery-sparkline' ], // Form enhancement libraries 'vendor-forms': [ 'select2', 'tempus-dominus', 'ion-rangeslider', 'switchery' ], // Table functionality 'vendor-tables': [ 'datatables.net', 'datatables.net-bs5', 'datatables.net-responsive', 'datatables.net-buttons' ], // Utility libraries 'vendor-utils': [ 'dayjs', 'nprogress', 'autosize' ] } } } } }); . Tree Shaking . Import only what you need: . // ❌ Bad - imports entire library import * as dayjs from 'dayjs'; // ✅ Good - imports only specific functions import dayjs from 'dayjs'; import customParseFormat from 'dayjs/plugin/customParseFormat'; // ❌ Bad - imports entire Chart.js import Chart from 'chart.js'; // ✅ Good - imports only needed components import { Chart, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, } from 'chart.js'; Chart.register( CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend ); . ",
    "url": "/gentelella/performance/#bundle-optimization",
    
    "relUrl": "/performance/#bundle-optimization"
  },"72": {
    "doc": "Performance Guide",
    "title": "Asset Optimization",
    "content": "Image Optimization . Responsive Images . &lt;!-- Use responsive images with srcset --&gt; &lt;img src=\"images/thumb-400.jpg\" srcset=\"images/thumb-400.jpg 400w, images/thumb-800.jpg 800w, images/thumb-1200.jpg 1200w\" sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\" alt=\"Dashboard preview\" loading=\"lazy\"&gt; . WebP Format with Fallback . &lt;picture&gt; &lt;source srcset=\"images/dashboard.webp\" type=\"image/webp\"&gt; &lt;source srcset=\"images/dashboard.jpg\" type=\"image/jpeg\"&gt; &lt;img src=\"images/dashboard.jpg\" alt=\"Dashboard\" loading=\"lazy\"&gt; &lt;/picture&gt; . Lazy Loading . &lt;!-- Native lazy loading --&gt; &lt;img src=\"images/placeholder.jpg\" data-src=\"images/actual-image.jpg\" loading=\"lazy\" alt=\"Description\"&gt; &lt;!-- Intersection Observer approach --&gt; &lt;img class=\"lazy\" src=\"images/placeholder.jpg\" data-src=\"images/actual-image.jpg\" alt=\"Description\"&gt; . // Lazy loading implementation const imageObserver = new IntersectionObserver((entries, observer) =&gt; { entries.forEach(entry =&gt; { if (entry.isIntersecting) { const img = entry.target; img.src = img.dataset.src; img.classList.remove('lazy'); observer.unobserve(img); } }); }); document.querySelectorAll('img[data-src]').forEach(img =&gt; { imageObserver.observe(img); }); . Font Optimization . Font Loading Strategy . &lt;!-- Preload critical fonts --&gt; &lt;link rel=\"preload\" href=\"/fonts/roboto-regular.woff2\" as=\"font\" type=\"font/woff2\" crossorigin&gt; &lt;link rel=\"preload\" href=\"/fonts/roboto-bold.woff2\" as=\"font\" type=\"font/woff2\" crossorigin&gt; &lt;!-- Font display swap for better performance --&gt; &lt;style&gt; @font-face { font-family: 'Roboto'; src: url('/fonts/roboto-regular.woff2') format('woff2'); font-display: swap; font-weight: 400; } &lt;/style&gt; . Subset Fonts . /* Load only the characters you need */ @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&amp;text=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'); . ",
    "url": "/gentelella/performance/#asset-optimization",
    
    "relUrl": "/performance/#asset-optimization"
  },"73": {
    "doc": "Performance Guide",
    "title": "Caching Strategies",
    "content": "Browser Caching . Vite Asset Hashing . // vite.config.js export default defineConfig({ build: { rollupOptions: { output: { // Add hash to filenames for cache busting entryFileNames: `assets/[name].[hash].js`, chunkFileNames: `assets/[name].[hash].js`, assetFileNames: `assets/[name].[hash].[ext]` } } } }); . Service Worker Implementation . // sw.js - Service Worker for caching const CACHE_NAME = 'gentelella-v2.0.0'; const urlsToCache = [ '/', '/assets/vendor-core.js', '/assets/main-core.js', '/assets/main.css', '/images/favicon.ico' ]; self.addEventListener('install', event =&gt; { event.waitUntil( caches.open(CACHE_NAME) .then(cache =&gt; cache.addAll(urlsToCache)) ); }); self.addEventListener('fetch', event =&gt; { event.respondWith( caches.match(event.request) .then(response =&gt; { // Return cached version or fetch from network return response || fetch(event.request); }) ); }); . CDN Integration . // vite.config.js - CDN configuration export default defineConfig({ build: { rollupOptions: { external: ['jquery', 'bootstrap'], output: { globals: { jquery: 'jQuery', bootstrap: 'bootstrap' } } } } }); . &lt;!-- Load popular libraries from CDN --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.1/dist/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt; . ",
    "url": "/gentelella/performance/#caching-strategies",
    
    "relUrl": "/performance/#caching-strategies"
  },"74": {
    "doc": "Performance Guide",
    "title": "Runtime Performance",
    "content": "Efficient DOM Manipulation . Batch DOM Updates . // ❌ Bad - multiple reflows function updateMultipleElements(data) { data.forEach(item =&gt; { const element = document.getElementById(item.id); element.style.width = item.width + 'px'; element.style.height = item.height + 'px'; element.textContent = item.text; }); } // ✅ Good - single reflow function updateMultipleElements(data) { const fragment = document.createDocumentFragment(); data.forEach(item =&gt; { const element = document.getElementById(item.id).cloneNode(true); element.style.width = item.width + 'px'; element.style.height = item.height + 'px'; element.textContent = item.text; fragment.appendChild(element); }); document.body.appendChild(fragment); } . Event Delegation . // ❌ Bad - multiple event listeners document.querySelectorAll('.btn').forEach(btn =&gt; { btn.addEventListener('click', handleClick); }); // ✅ Good - single delegated listener document.addEventListener('click', function(e) { if (e.target.classList.contains('btn')) { handleClick(e); } }); . Memory Management . Cleanup Event Listeners . class Component { constructor(element) { this.element = element; this.handleClick = this.handleClick.bind(this); this.element.addEventListener('click', this.handleClick); } destroy() { // Clean up event listeners this.element.removeEventListener('click', this.handleClick); this.element = null; } handleClick(e) { // Handle click } } . Debounce Expensive Operations . function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () =&gt; { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } // Usage for search const debouncedSearch = debounce(performSearch, 300); document.getElementById('search').addEventListener('input', debouncedSearch); . ",
    "url": "/gentelella/performance/#runtime-performance",
    
    "relUrl": "/performance/#runtime-performance"
  },"75": {
    "doc": "Performance Guide",
    "title": "Monitoring and Analysis",
    "content": "Performance Monitoring . Core Web Vitals . // Monitor Core Web Vitals import {getCLS, getFID, getFCP, getLCP, getTTFB} from 'web-vitals'; function sendToAnalytics(metric) { // Send to your analytics service console.log(metric); } getCLS(sendToAnalytics); getFID(sendToAnalytics); getFCP(sendToAnalytics); getLCP(sendToAnalytics); getTTFB(sendToAnalytics); . Performance Observer . // Monitor long tasks const observer = new PerformanceObserver((list) =&gt; { for (const entry of list.getEntries()) { console.log('Long task detected:', entry); } }); observer.observe({entryTypes: ['longtask']}); // Monitor resource loading const resourceObserver = new PerformanceObserver((list) =&gt; { for (const entry of list.getEntries()) { if (entry.duration &gt; 1000) { console.log('Slow resource:', entry.name, entry.duration); } } }); resourceObserver.observe({entryTypes: ['resource']}); . Bundle Analysis . Webpack Bundle Analyzer . # Analyze your bundles npm run build:analyze . // scripts/analyze.js import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer'; export default defineConfig({ plugins: [ process.env.ANALYZE &amp;&amp; new BundleAnalyzerPlugin() ].filter(Boolean) }); . Lighthouse CI . # .github/workflows/lighthouse.yml name: Lighthouse CI on: [push] jobs: lighthouse: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Use Node.js uses: actions/setup-node@v2 with: node-version: '16' - run: npm install - run: npm run build - name: Run Lighthouse CI uses: treosh/lighthouse-ci-action@v8 with: configPath: './lighthouserc.json' . ",
    "url": "/gentelella/performance/#monitoring-and-analysis",
    
    "relUrl": "/performance/#monitoring-and-analysis"
  },"76": {
    "doc": "Performance Guide",
    "title": "Performance Checklist",
    "content": "Development Phase . | Code Splitting: Implement route-based and component-based splitting | Tree Shaking: Import only needed functions and components | Module Loading: Use dynamic imports for non-critical code | Bundle Analysis: Regularly analyze bundle sizes | Dead Code: Remove unused CSS and JavaScript | . Asset Optimization . | Images: Optimize, use WebP format, implement lazy loading | Fonts: Subset fonts, use font-display: swap | Icons: Use icon fonts or SVG sprites | Compression: Enable gzip/brotli compression | Minification: Minify CSS, JavaScript, and HTML | . Caching Strategy . | Browser Caching: Set appropriate cache headers | CDN: Use CDN for static assets | Service Worker: Implement for offline functionality | Versioning: Use file hashing for cache busting | . Runtime Performance . | Event Delegation: Use for dynamic content | Debouncing: Implement for expensive operations | Memory Leaks: Clean up event listeners and timers | DOM Manipulation: Batch updates and use DocumentFragment | . Monitoring . | Core Web Vitals: Monitor LCP, FID, CLS | Performance API: Track loading times | Error Tracking: Monitor JavaScript errors | User Experience: Track real user metrics | . ",
    "url": "/gentelella/performance/#performance-checklist",
    
    "relUrl": "/performance/#performance-checklist"
  },"77": {
    "doc": "Performance Guide",
    "title": "Advanced Optimization Techniques",
    "content": "Preloading Strategies . Module Preloading . &lt;!-- Preload critical modules --&gt; &lt;link rel=\"modulepreload\" href=\"/assets/vendor-core.js\"&gt; &lt;link rel=\"modulepreload\" href=\"/assets/main-core.js\"&gt; &lt;!-- Prefetch likely-needed modules --&gt; &lt;link rel=\"prefetch\" href=\"/assets/vendor-charts.js\"&gt; &lt;link rel=\"prefetch\" href=\"/assets/vendor-forms.js\"&gt; . Predictive Loading . // Preload modules based on user behavior const observeNavigation = new IntersectionObserver((entries) =&gt; { entries.forEach(entry =&gt; { if (entry.isIntersecting) { const href = entry.target.getAttribute('href'); // Preload likely modules for the target page if (href.includes('charts')) { import('./modules/charts.js'); } else if (href.includes('forms')) { import('./modules/forms.js'); } } }); }); // Observe navigation links document.querySelectorAll('a[href]').forEach(link =&gt; { observeNavigation.observe(link); }); . Critical Path Optimization . Critical CSS Inlining . &lt;style&gt; /* Inline critical CSS for above-the-fold content */ .header, .sidebar, .main-content { /* critical styles */ } &lt;/style&gt; &lt;!-- Load full CSS asynchronously --&gt; &lt;link rel=\"preload\" href=\"/assets/main.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\"&gt; . Resource Hints . &lt;!-- DNS prefetch for external resources --&gt; &lt;link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\"&gt; &lt;link rel=\"dns-prefetch\" href=\"//cdn.jsdelivr.net\"&gt; &lt;!-- Preconnect to critical third-party origins --&gt; &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt; . ",
    "url": "/gentelella/performance/#advanced-optimization-techniques",
    
    "relUrl": "/performance/#advanced-optimization-techniques"
  },"78": {
    "doc": "Performance Guide",
    "title": "Next Steps",
    "content": ". | Deployment Guide - Deploy optimized builds | Monitoring Guide - Set up performance monitoring | Troubleshooting - Solve performance issues | . 💡 Pro Tip: Use the npm run optimize command to analyze your current bundle and get personalized optimization recommendations based on your specific usage patterns. ",
    "url": "/gentelella/performance/#next-steps",
    
    "relUrl": "/performance/#next-steps"
  },"79": {
    "doc": "Performance Guide",
    "title": "Performance Guide",
    "content": " ",
    "url": "/gentelella/performance/",
    
    "relUrl": "/performance/"
  }
}
